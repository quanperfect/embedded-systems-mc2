
masterclass2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004384  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e60  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005390  08005390  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005398  08005398  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  080053a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000044  080053e4  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  080053e4  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f04  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a21  00000000  00000000  00033f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  000369a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  000379a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024175  00000000  00000000  00038898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015506  00000000  00000000  0005ca0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8ddb  00000000  00000000  00071f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014acee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004214  00000000  00000000  0014ad44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000044 	.word	0x20000044
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004518 	.word	0x08004518

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000048 	.word	0x20000048
 80001e8:	08004518 	.word	0x08004518

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Buzzer_Init>:
#include "buzzer.h"
#include "main.h"

#include "tim.h"

void Buzzer_Init (void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim2,TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <Buzzer_Init+0x18>)
 80004fc:	f002 fffe 	bl	80034fc <HAL_TIM_OC_Start>
	HAL_TIM_PWM_Init(&htim2);
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <Buzzer_Init+0x18>)
 8000502:	f003 f8c3 	bl	800368c <HAL_TIM_PWM_Init>
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200004bc 	.word	0x200004bc

08000510 <Buzzer_Set_Freq>:

void Buzzer_Set_Freq (uint16_t freq) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	80fb      	strh	r3, [r7, #6]
	TIM2->PSC = ((2 * HAL_RCC_GetPCLK1Freq()) / (2 * BUZZER_VOLUME_MAX * freq)) - 1;
 800051a:	f002 ffc7 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 800051e:	4603      	mov	r3, r0
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	88fa      	ldrh	r2, [r7, #6]
 8000524:	0052      	lsls	r2, r2, #1
 8000526:	fbb3 f3f2 	udiv	r3, r3, r2
 800052a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800052e:	3b01      	subs	r3, #1
 8000530:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <Buzzer_Set_Volume>:

void Buzzer_Set_Volume (uint16_t volume) {
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	4603      	mov	r3, r0
 8000542:	80fb      	strh	r3, [r7, #6]
	if (volume > BUZZER_VOLUME_MAX)
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d901      	bls.n	800054e <Buzzer_Set_Volume+0x14>
		volume = BUZZER_VOLUME_MAX;
 800054a:	2301      	movs	r3, #1
 800054c:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = volume;
 800054e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <Buzzer_Play_Sound>:

void Buzzer_Play_Sound (uint32_t* sound, uint32_t* delays, uint16_t len) {
 8000562:	b580      	push	{r7, lr}
 8000564:	b086      	sub	sp, #24
 8000566:	af00      	add	r7, sp, #0
 8000568:	60f8      	str	r0, [r7, #12]
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	4613      	mov	r3, r2
 800056e:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < len; i++) {
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	e034      	b.n	80005e0 <Buzzer_Play_Sound+0x7e>
	  	if (sound[i] != 0) {
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	4413      	add	r3, r2
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d01b      	beq.n	80005bc <Buzzer_Play_Sound+0x5a>
	  		Buzzer_Set_Freq(sound[i]);
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	4413      	add	r3, r2
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	b29b      	uxth	r3, r3
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ffbd 	bl	8000510 <Buzzer_Set_Freq>
	  		Buzzer_Set_Volume(BUZZER_VOLUME_MAX);
 8000596:	2001      	movs	r0, #1
 8000598:	f7ff ffcf 	bl	800053a <Buzzer_Set_Volume>
	  		HAL_Delay(1920/delays[i]/2);
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	4413      	add	r3, r2
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80005aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 f8e6 	bl	8001780 <HAL_Delay>
	  		Buzzer_Set_Volume(BUZZER_VOLUME_MUTE);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff ffc0 	bl	800053a <Buzzer_Set_Volume>
 80005ba:	e00b      	b.n	80005d4 <Buzzer_Play_Sound+0x72>
	  	} else HAL_Delay(1920/delays[i]/2);
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	68ba      	ldr	r2, [r7, #8]
 80005c2:	4413      	add	r3, r2
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80005ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 f8d6 	bl	8001780 <HAL_Delay>
	  	HAL_Delay(10);
 80005d4:	200a      	movs	r0, #10
 80005d6:	f001 f8d3 	bl	8001780 <HAL_Delay>
	for(int i = 0; i < len; i++) {
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbc6      	blt.n	8000576 <Buzzer_Play_Sound+0x14>
	}
}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_GPIO_Init+0x84>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <MX_GPIO_Init+0x84>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_GPIO_Init+0x84>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_GPIO_Init+0x84>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_GPIO_Init+0x84>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_GPIO_Init+0x84>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_GPIO_Init+0x84>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <MX_GPIO_Init+0x84>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_GPIO_Init+0x84>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_GPIO_Init+0x84>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <MX_GPIO_Init+0x84>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_GPIO_Init+0x84>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2C1_Init+0x50>)
 8000682:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <MX_I2C1_Init+0x54>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_I2C1_Init+0x50>)
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <MX_I2C1_Init+0x58>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_I2C1_Init+0x50>)
 800069a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_I2C1_Init+0x50>)
 80006ba:	f001 fb17 	bl	8001cec <HAL_I2C_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 fbad 	bl	8000e22 <Error_Handler>
  }

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000468 	.word	0x20000468
 80006d0:	40005400 	.word	0x40005400
 80006d4:	000186a0 	.word	0x000186a0

080006d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a19      	ldr	r2, [pc, #100]	; (800075c <HAL_I2C_MspInit+0x84>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d12c      	bne.n	8000754 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_I2C_MspInit+0x88>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <HAL_I2C_MspInit+0x88>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_I2C_MspInit+0x88>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000716:	f44f 7340 	mov.w	r3, #768	; 0x300
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800071c:	2312      	movs	r3, #18
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000720:	2301      	movs	r3, #1
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000728:	2304      	movs	r3, #4
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <HAL_I2C_MspInit+0x8c>)
 8000734:	f001 f92e 	bl	8001994 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_I2C_MspInit+0x88>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_I2C_MspInit+0x88>)
 8000742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_I2C_MspInit+0x88>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000754:	bf00      	nop
 8000756:	3728      	adds	r7, #40	; 0x28
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40005400 	.word	0x40005400
 8000760:	40023800 	.word	0x40023800
 8000764:	40020400 	.word	0x40020400

08000768 <Set_Keyboard>:
#include "sdk_uart.h"
#include "usart.h"

#define KBRD_ADDR 0xE2

HAL_StatusTypeDef Set_Keyboard( void ) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 800076e:	2300      	movs	r3, #0
 8000770:	71fb      	strb	r3, [r7, #7]
	uint8_t buf;

	buf = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, POLARITY_INVERSION, &buf);
 8000776:	1dbb      	adds	r3, r7, #6
 8000778:	461a      	mov	r2, r3
 800077a:	2102      	movs	r1, #2
 800077c:	20e2      	movs	r0, #226	; 0xe2
 800077e:	f000 fd6d 	bl	800125c <PCA9538_Write_Register>
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <Set_Keyboard+0x2c>
		UART_Transmit((uint8_t*)"Error write polarity\n");
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <Set_Keyboard+0x5c>)
 800078e:	f000 fd97 	bl	80012c0 <UART_Transmit>
		goto exit;
 8000792:	e011      	b.n	80007b8 <Set_Keyboard+0x50>
	}

	buf = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, OUTPUT_PORT, &buf);
 8000798:	1dbb      	adds	r3, r7, #6
 800079a:	461a      	mov	r2, r3
 800079c:	2101      	movs	r1, #1
 800079e:	20e2      	movs	r0, #226	; 0xe2
 80007a0:	f000 fd5c 	bl	800125c <PCA9538_Write_Register>
 80007a4:	4603      	mov	r3, r0
 80007a6:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d003      	beq.n	80007b6 <Set_Keyboard+0x4e>
		UART_Transmit((uint8_t*)"Error write output\n");
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <Set_Keyboard+0x60>)
 80007b0:	f000 fd86 	bl	80012c0 <UART_Transmit>
 80007b4:	e000      	b.n	80007b8 <Set_Keyboard+0x50>
	}

exit:
 80007b6:	bf00      	nop
	return ret;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	08004530 	.word	0x08004530
 80007c8:	08004548 	.word	0x08004548

080007cc <Get_Key>:
	else Nkey = 0x00;

	return Nkey;
}

uint8_t Get_Key( uint8_t  Nrow ){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	uint8_t Nkey = 0x00;
 80007d6:	2300      	movs	r3, #0
 80007d8:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret = HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	73bb      	strb	r3, [r7, #14]
	uint8_t buf;
	uint8_t kbd_in;

	ret = Set_Keyboard();
 80007de:	f7ff ffc3 	bl	8000768 <Set_Keyboard>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <Get_Key+0x26>
		UART_Transmit((uint8_t*)"Error write init\n");
 80007ec:	4858      	ldr	r0, [pc, #352]	; (8000950 <Get_Key+0x184>)
 80007ee:	f000 fd67 	bl	80012c0 <UART_Transmit>
	}

	buf = Nrow;
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	733b      	strb	r3, [r7, #12]
	ret = PCA9538_Write_Register(KBRD_ADDR, CONFIG, &buf);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	461a      	mov	r2, r3
 80007fc:	2103      	movs	r1, #3
 80007fe:	20e2      	movs	r0, #226	; 0xe2
 8000800:	f000 fd2c 	bl	800125c <PCA9538_Write_Register>
 8000804:	4603      	mov	r3, r0
 8000806:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <Get_Key+0x48>
		UART_Transmit((uint8_t*)"Error write config\n");
 800080e:	4851      	ldr	r0, [pc, #324]	; (8000954 <Get_Key+0x188>)
 8000810:	f000 fd56 	bl	80012c0 <UART_Transmit>
	}

	ret = PCA9538_Read_Inputs(KBRD_ADDR, &buf);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	20e2      	movs	r0, #226	; 0xe2
 800081c:	f000 fd3e 	bl	800129c <PCA9538_Read_Inputs>
 8000820:	4603      	mov	r3, r0
 8000822:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <Get_Key+0x64>
		UART_Transmit((uint8_t*)"Read error\n");
 800082a:	484b      	ldr	r0, [pc, #300]	; (8000958 <Get_Key+0x18c>)
 800082c:	f000 fd48 	bl	80012c0 <UART_Transmit>
	}

	kbd_in = buf & 0x70;
 8000830:	7b3b      	ldrb	r3, [r7, #12]
 8000832:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000836:	737b      	strb	r3, [r7, #13]
	Nkey = kbd_in;
 8000838:	7b7b      	ldrb	r3, [r7, #13]
 800083a:	73fb      	strb	r3, [r7, #15]

	// 7 8 9
	// 4 5 6
	// 1 2 3
	// 0 r s
	if( kbd_in != 0x70) { //redefined as normal calculator
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	2b70      	cmp	r3, #112	; 0x70
 8000840:	d07c      	beq.n	800093c <Get_Key+0x170>
		if( !(kbd_in & 0x10) ) { //left
 8000842:	7b7b      	ldrb	r3, [r7, #13]
 8000844:	f003 0310 	and.w	r3, r3, #16
 8000848:	2b00      	cmp	r3, #0
 800084a:	d123      	bne.n	8000894 <Get_Key+0xc8>
			switch (Nrow) {
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3bf7      	subs	r3, #247	; 0xf7
 8000850:	2b07      	cmp	r3, #7
 8000852:	d820      	bhi.n	8000896 <Get_Key+0xca>
 8000854:	a201      	add	r2, pc, #4	; (adr r2, 800085c <Get_Key+0x90>)
 8000856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085a:	bf00      	nop
 800085c:	0800088f 	.word	0x0800088f
 8000860:	08000897 	.word	0x08000897
 8000864:	08000897 	.word	0x08000897
 8000868:	08000897 	.word	0x08000897
 800086c:	08000889 	.word	0x08000889
 8000870:	08000897 	.word	0x08000897
 8000874:	08000883 	.word	0x08000883
 8000878:	0800087d 	.word	0x0800087d
				case ROW1:
					Nkey = 0x07;
 800087c:	2307      	movs	r3, #7
 800087e:	73fb      	strb	r3, [r7, #15]
					break;
 8000880:	e009      	b.n	8000896 <Get_Key+0xca>
				case ROW2:
					Nkey = 0x04;
 8000882:	2304      	movs	r3, #4
 8000884:	73fb      	strb	r3, [r7, #15]
					break;
 8000886:	e006      	b.n	8000896 <Get_Key+0xca>
				case ROW3:
					Nkey = 0x01;
 8000888:	2301      	movs	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
					break;
 800088c:	e003      	b.n	8000896 <Get_Key+0xca>
				case ROW4:
					Nkey = 0x00;
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
					break;
 8000892:	e000      	b.n	8000896 <Get_Key+0xca>
			}
		}
 8000894:	bf00      	nop
		if( !(kbd_in & 0x20) ) { //center
 8000896:	7b7b      	ldrb	r3, [r7, #13]
 8000898:	f003 0320 	and.w	r3, r3, #32
 800089c:	2b00      	cmp	r3, #0
 800089e:	d123      	bne.n	80008e8 <Get_Key+0x11c>
			switch (Nrow) {
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	3bf7      	subs	r3, #247	; 0xf7
 80008a4:	2b07      	cmp	r3, #7
 80008a6:	d820      	bhi.n	80008ea <Get_Key+0x11e>
 80008a8:	a201      	add	r2, pc, #4	; (adr r2, 80008b0 <Get_Key+0xe4>)
 80008aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ae:	bf00      	nop
 80008b0:	080008e3 	.word	0x080008e3
 80008b4:	080008eb 	.word	0x080008eb
 80008b8:	080008eb 	.word	0x080008eb
 80008bc:	080008eb 	.word	0x080008eb
 80008c0:	080008dd 	.word	0x080008dd
 80008c4:	080008eb 	.word	0x080008eb
 80008c8:	080008d7 	.word	0x080008d7
 80008cc:	080008d1 	.word	0x080008d1
				case ROW1:
					Nkey = 0x08;
 80008d0:	2308      	movs	r3, #8
 80008d2:	73fb      	strb	r3, [r7, #15]
					break;
 80008d4:	e009      	b.n	80008ea <Get_Key+0x11e>
				case ROW2:
					Nkey = 0x05;
 80008d6:	2305      	movs	r3, #5
 80008d8:	73fb      	strb	r3, [r7, #15]
					break;
 80008da:	e006      	b.n	80008ea <Get_Key+0x11e>
				case ROW3:
					Nkey = 0x02;
 80008dc:	2302      	movs	r3, #2
 80008de:	73fb      	strb	r3, [r7, #15]
					break;
 80008e0:	e003      	b.n	80008ea <Get_Key+0x11e>
				case ROW4:
					Nkey = 0x0B; // reset(pause)
 80008e2:	230b      	movs	r3, #11
 80008e4:	73fb      	strb	r3, [r7, #15]
					break;
 80008e6:	e000      	b.n	80008ea <Get_Key+0x11e>
			}
		}
 80008e8:	bf00      	nop
		if( !(kbd_in & 0x40) ) { //right
 80008ea:	7b7b      	ldrb	r3, [r7, #13]
 80008ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d126      	bne.n	8000942 <Get_Key+0x176>
			switch (Nrow) {
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	3bf7      	subs	r3, #247	; 0xf7
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	d823      	bhi.n	8000944 <Get_Key+0x178>
 80008fc:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <Get_Key+0x138>)
 80008fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000902:	bf00      	nop
 8000904:	08000937 	.word	0x08000937
 8000908:	08000945 	.word	0x08000945
 800090c:	08000945 	.word	0x08000945
 8000910:	08000945 	.word	0x08000945
 8000914:	08000931 	.word	0x08000931
 8000918:	08000945 	.word	0x08000945
 800091c:	0800092b 	.word	0x0800092b
 8000920:	08000925 	.word	0x08000925
				case ROW1:
					Nkey = 0x09;
 8000924:	2309      	movs	r3, #9
 8000926:	73fb      	strb	r3, [r7, #15]
					break;
 8000928:	e00c      	b.n	8000944 <Get_Key+0x178>
				case ROW2:
					Nkey = 0x06;
 800092a:	2306      	movs	r3, #6
 800092c:	73fb      	strb	r3, [r7, #15]
					break;
 800092e:	e009      	b.n	8000944 <Get_Key+0x178>
				case ROW3:
					Nkey = 0x03;
 8000930:	2303      	movs	r3, #3
 8000932:	73fb      	strb	r3, [r7, #15]
					break;
 8000934:	e006      	b.n	8000944 <Get_Key+0x178>
				case ROW4:
					Nkey = 0x0C; // start (unpause)
 8000936:	230c      	movs	r3, #12
 8000938:	73fb      	strb	r3, [r7, #15]
					break;
 800093a:	e003      	b.n	8000944 <Get_Key+0x178>
			}
		}
	}
	else Nkey = 0x0D;
 800093c:	230d      	movs	r3, #13
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e000      	b.n	8000944 <Get_Key+0x178>
		}
 8000942:	bf00      	nop

	return Nkey;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	0800455c 	.word	0x0800455c
 8000954:	08004570 	.word	0x08004570
 8000958:	08004584 	.word	0x08004584

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000960:	f000 fe9c 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000964:	f000 f812 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f7ff fe44 	bl	80005f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800096c:	f7ff fe86 	bl	800067c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8000970:	f000 fdf8 	bl	8001564 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000974:	f000 fd46 	bl	8001404 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  oled_Init();
 8000978:	f000 fa72 	bl	8000e60 <oled_Init>
  MX_TIM2_Init();
 800097c:	f000 fd42 	bl	8001404 <MX_TIM2_Init>
  Buzzer_Init();
 8000980:	f7ff fdb8 	bl	80004f4 <Buzzer_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIMER_NOW();
 8000984:	f000 f86c 	bl	8000a60 <TIMER_NOW>
 8000988:	e7fc      	b.n	8000984 <main+0x28>
	...

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f003 fdb4 	bl	8004508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <SystemClock_Config+0xcc>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <SystemClock_Config+0xcc>)
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <SystemClock_Config+0xcc>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <SystemClock_Config+0xd0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009fc:	2319      	movs	r3, #25
 80009fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 f92a 	bl	8002c6c <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a1e:	f000 fa00 	bl	8000e22 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2302      	movs	r3, #2
 8000a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2105      	movs	r1, #5
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 fb8b 	bl	800315c <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a4c:	f000 f9e9 	bl	8000e22 <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3750      	adds	r7, #80	; 0x50
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <TIMER_NOW>:

/* USER CODE BEGIN 4 */

void TIMER_NOW( void ){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
		uint8_t Row[4] = {ROW4, ROW3, ROW2, ROW1}, Key, OldKey, OLED_Keys[4] = {0x30,0x30,0x30,0x30};
 8000a66:	4bca      	ldr	r3, [pc, #808]	; (8000d90 <TIMER_NOW+0x330>)
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	f04f 3330 	mov.w	r3, #808464432	; 0x30303030
 8000a6e:	607b      	str	r3, [r7, #4]
		oled_Reset();
 8000a70:	f000 f9ca 	bl	8000e08 <oled_Reset>
		oled_WriteString("Timer: ", Font_11x18, White);
 8000a74:	4ac7      	ldr	r2, [pc, #796]	; (8000d94 <TIMER_NOW+0x334>)
 8000a76:	2301      	movs	r3, #1
 8000a78:	ca06      	ldmia	r2, {r1, r2}
 8000a7a:	48c7      	ldr	r0, [pc, #796]	; (8000d98 <TIMER_NOW+0x338>)
 8000a7c:	f000 fb90 	bl	80011a0 <oled_WriteString>
		OLED_TIMER(OLED_Keys);
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f994 	bl	8000db0 <OLED_TIMER>
		oled_UpdateScreen();
 8000a88:	f000 fa7a 	bl	8000f80 <oled_UpdateScreen>
		uint8_t isStarted = 0, isPaused = 0, isManuallyStopped = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a92:	2300      	movs	r3, #0
 8000a94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t position = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		int count = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
		uint32_t timeSeconds = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]

		uint8_t sec, sec10, min, min10;

	  while (1) {

	    if (isStarted) {
 8000aac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 80b3 	beq.w	8000c1c <TIMER_NOW+0x1bc>
				while (timeSeconds != 0) {
 8000ab6:	e08f      	b.n	8000bd8 <TIMER_NOW+0x178>
					HAL_Delay(25);
 8000ab8:	2019      	movs	r0, #25
 8000aba:	f000 fe61 	bl	8001780 <HAL_Delay>
					count++;
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
					if (!isPaused && count == 1000 / 28) {
 8000ac4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d15d      	bne.n	8000b88 <TIMER_NOW+0x128>
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	2b23      	cmp	r3, #35	; 0x23
 8000ad0:	d15a      	bne.n	8000b88 <TIMER_NOW+0x128>
						timeSeconds--;
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	61bb      	str	r3, [r7, #24]
						min10 = timeSeconds / 600;
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	4ab0      	ldr	r2, [pc, #704]	; (8000d9c <TIMER_NOW+0x33c>)
 8000adc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae0:	099b      	lsrs	r3, r3, #6
 8000ae2:	74fb      	strb	r3, [r7, #19]
						count = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
						min = (timeSeconds - 600 * min10) / 60;
 8000ae8:	7cfb      	ldrb	r3, [r7, #19]
 8000aea:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000aee:	fb02 f303 	mul.w	r3, r2, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	1a9b      	subs	r3, r3, r2
 8000af8:	4aa9      	ldr	r2, [pc, #676]	; (8000da0 <TIMER_NOW+0x340>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	74bb      	strb	r3, [r7, #18]
						sec10 = (timeSeconds - 600 * min10 - 60 * min) / 10;
 8000b02:	7cfb      	ldrb	r3, [r7, #19]
 8000b04:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000b08:	fb02 f303 	mul.w	r3, r2, r3
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	1a99      	subs	r1, r3, r2
 8000b12:	7cba      	ldrb	r2, [r7, #18]
 8000b14:	4613      	mov	r3, r2
 8000b16:	011b      	lsls	r3, r3, #4
 8000b18:	1a9b      	subs	r3, r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	1acb      	subs	r3, r1, r3
 8000b1e:	4aa1      	ldr	r2, [pc, #644]	; (8000da4 <TIMER_NOW+0x344>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	747b      	strb	r3, [r7, #17]
						sec = (timeSeconds - 600 * min10 - 60 * min - 10 * sec10);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	7cfb      	ldrb	r3, [r7, #19]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	0089      	lsls	r1, r1, #2
 8000b32:	4419      	add	r1, r3
 8000b34:	0049      	lsls	r1, r1, #1
 8000b36:	440b      	add	r3, r1
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	7cbb      	ldrb	r3, [r7, #18]
 8000b42:	4619      	mov	r1, r3
 8000b44:	0109      	lsls	r1, r1, #4
 8000b46:	1acb      	subs	r3, r1, r3
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	7c7b      	ldrb	r3, [r7, #17]
 8000b52:	4619      	mov	r1, r3
 8000b54:	0089      	lsls	r1, r1, #2
 8000b56:	440b      	add	r3, r1
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	743b      	strb	r3, [r7, #16]
						OLED_Keys[0] = 0x30 + sec; // 0x30 = 0
 8000b60:	7c3b      	ldrb	r3, [r7, #16]
 8000b62:	3330      	adds	r3, #48	; 0x30
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	713b      	strb	r3, [r7, #4]
						OLED_Keys[1] = 0x30 + sec10;
 8000b68:	7c7b      	ldrb	r3, [r7, #17]
 8000b6a:	3330      	adds	r3, #48	; 0x30
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	717b      	strb	r3, [r7, #5]
						OLED_Keys[2] = 0x30 + min;
 8000b70:	7cbb      	ldrb	r3, [r7, #18]
 8000b72:	3330      	adds	r3, #48	; 0x30
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	71bb      	strb	r3, [r7, #6]
						OLED_Keys[3] = 0x30 + min10;
 8000b78:	7cfb      	ldrb	r3, [r7, #19]
 8000b7a:	3330      	adds	r3, #48	; 0x30
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	71fb      	strb	r3, [r7, #7]
						OLED_TIMER(OLED_Keys);
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f914 	bl	8000db0 <OLED_TIMER>
					}

					OldKey = Key;
 8000b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b8c:	73fb      	strb	r3, [r7, #15]
					Key = Get_Key( Row[0] );
 8000b8e:	7a3b      	ldrb	r3, [r7, #8]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fe1b 	bl	80007cc <Get_Key>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

					if (Key == 0x0C && OldKey != Key) {
 8000b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ba0:	2b0c      	cmp	r3, #12
 8000ba2:	d111      	bne.n	8000bc8 <TIMER_NOW+0x168>
 8000ba4:	7bfa      	ldrb	r2, [r7, #15]
 8000ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d00c      	beq.n	8000bc8 <TIMER_NOW+0x168>
						if (isPaused) {
 8000bae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <TIMER_NOW+0x15e>
							isPaused = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000bbc:	e002      	b.n	8000bc4 <TIMER_NOW+0x164>
						} else {
							isPaused = 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						}
						count = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
					}

					if (Key == 0x0B) {
 8000bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bcc:	2b0b      	cmp	r3, #11
 8000bce:	d103      	bne.n	8000bd8 <TIMER_NOW+0x178>
					  isManuallyStopped = 1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					  break;
 8000bd6:	e003      	b.n	8000be0 <TIMER_NOW+0x180>
				while (timeSeconds != 0) {
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f47f af6c 	bne.w	8000ab8 <TIMER_NOW+0x58>
					}
			  }

			  isStarted = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  position = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			  OLED_Keys[0] = 0x30;
 8000bec:	2330      	movs	r3, #48	; 0x30
 8000bee:	713b      	strb	r3, [r7, #4]
			  OLED_Keys[1] = 0x30;
 8000bf0:	2330      	movs	r3, #48	; 0x30
 8000bf2:	717b      	strb	r3, [r7, #5]
			  OLED_Keys[2] = 0x30;
 8000bf4:	2330      	movs	r3, #48	; 0x30
 8000bf6:	71bb      	strb	r3, [r7, #6]
			  OLED_Keys[3] = 0x30;
 8000bf8:	2330      	movs	r3, #48	; 0x30
 8000bfa:	71fb      	strb	r3, [r7, #7]
			  OLED_TIMER(OLED_Keys);
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f8d6 	bl	8000db0 <OLED_TIMER>
			  if (!isManuallyStopped) {
 8000c04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d104      	bne.n	8000c16 <TIMER_NOW+0x1b6>
				  Buzzer_Play_Sound(sound, sound_delays, sizeof(sound) / sizeof(uint32_t));
 8000c0c:	2206      	movs	r2, #6
 8000c0e:	4966      	ldr	r1, [pc, #408]	; (8000da8 <TIMER_NOW+0x348>)
 8000c10:	4866      	ldr	r0, [pc, #408]	; (8000dac <TIMER_NOW+0x34c>)
 8000c12:	f7ff fca6 	bl	8000562 <Buzzer_Play_Sound>
			  }
			  isManuallyStopped = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

        // 7 8 9
        // 4 5 6
        // 1 2 3
        // 0 s p
	    for (int i = 0; i < 4; i++) {
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	e0ae      	b.n	8000d80 <TIMER_NOW+0x320>
	      OldKey = Key;
 8000c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c26:	73fb      	strb	r3, [r7, #15]
	      Key = Get_Key( Row[i] );
 8000c28:	f107 0208 	add.w	r2, r7, #8
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fdca 	bl	80007cc <Get_Key>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      if (Key != OldKey){
 8000c3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f000 8095 	beq.w	8000d74 <TIMER_NOW+0x314>
	        if (Key >= 0x00 && Key <= 0x0A && !isStarted) {
 8000c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c4e:	2b0a      	cmp	r3, #10
 8000c50:	d875      	bhi.n	8000d3e <TIMER_NOW+0x2de>
 8000c52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d171      	bne.n	8000d3e <TIMER_NOW+0x2de>
	          OLED_Keys[position] = 0x30 + Key;
 8000c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c62:	3230      	adds	r2, #48	; 0x30
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f803 2c24 	strb.w	r2, [r3, #-36]
	          if (position == 0) {
 8000c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d112      	bne.n	8000c9e <TIMER_NOW+0x23e>
				  timeSeconds = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
				  OLED_Keys[1] = 0x30;
 8000c7c:	2330      	movs	r3, #48	; 0x30
 8000c7e:	717b      	strb	r3, [r7, #5]
				  OLED_Keys[2] = 0x30;
 8000c80:	2330      	movs	r3, #48	; 0x30
 8000c82:	71bb      	strb	r3, [r7, #6]
				  OLED_Keys[3] = 0x30;
 8000c84:	2330      	movs	r3, #48	; 0x30
 8000c86:	71fb      	strb	r3, [r7, #7]
				  timeSeconds += Key;
 8000c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4413      	add	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
				  position++;
 8000c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c96:	3301      	adds	r3, #1
 8000c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000c9c:	e04a      	b.n	8000d34 <TIMER_NOW+0x2d4>
	          } else  if (position == 1) {
 8000c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d10f      	bne.n	8000cc6 <TIMER_NOW+0x266>
	        	  timeSeconds += 10*Key;
 8000ca6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000caa:	4613      	mov	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
	              position++;
 8000cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000cc4:	e036      	b.n	8000d34 <TIMER_NOW+0x2d4>
	          } else if (position == 2) {
 8000cc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d10f      	bne.n	8000cee <TIMER_NOW+0x28e>
	        	  timeSeconds += 60*Key;
 8000cce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	461a      	mov	r2, r3
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	4413      	add	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
	              position++;
 8000ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000cec:	e022      	b.n	8000d34 <TIMER_NOW+0x2d4>
	          } else if (position == 3) {
 8000cee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d11e      	bne.n	8000d34 <TIMER_NOW+0x2d4>
	        	  if (Key > 5) {
 8000cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cfa:	2b05      	cmp	r3, #5
 8000cfc:	d90d      	bls.n	8000d1a <TIMER_NOW+0x2ba>
	        		  Key = 5;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        		  OLED_Keys[position] = 0x30 + Key;
 8000d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d0c:	3230      	adds	r2, #48	; 0x30
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d14:	440b      	add	r3, r1
 8000d16:	f803 2c24 	strb.w	r2, [r3, #-36]
	        	  }
	            timeSeconds += 600* Key;
 8000d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d1e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000d22:	fb02 f303 	mul.w	r3, r2, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
	            position = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	          }

	          OLED_TIMER(OLED_Keys);
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f83a 	bl	8000db0 <OLED_TIMER>
 8000d3c:	e01a      	b.n	8000d74 <TIMER_NOW+0x314>
	        } else if (Key == 0x0B) { // reset
 8000d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d42:	2b0b      	cmp	r3, #11
 8000d44:	d021      	beq.n	8000d8a <TIMER_NOW+0x32a>
	            break;
	        } else if (Key == 0x0C) { // toggle pause
 8000d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d4a:	2b0c      	cmp	r3, #12
 8000d4c:	d112      	bne.n	8000d74 <TIMER_NOW+0x314>
	          if (!isStarted) {
 8000d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d103      	bne.n	8000d5e <TIMER_NOW+0x2fe>
	            isStarted  = 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000d5c:	e00a      	b.n	8000d74 <TIMER_NOW+0x314>
	          } else {
	            if (isPaused) {
 8000d5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <TIMER_NOW+0x30e>
	              isPaused = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000d6c:	e002      	b.n	8000d74 <TIMER_NOW+0x314>
	            } else {
	              isPaused = 1;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	            }
	          }
	        }
	      }
	      HAL_Delay(25);
 8000d74:	2019      	movs	r0, #25
 8000d76:	f000 fd03 	bl	8001780 <HAL_Delay>
	    for (int i = 0; i < 4; i++) {
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	f77f af4d 	ble.w	8000c22 <TIMER_NOW+0x1c2>
 8000d88:	e690      	b.n	8000aac <TIMER_NOW+0x4c>
	            break;
 8000d8a:	bf00      	nop
	    if (isStarted) {
 8000d8c:	e68e      	b.n	8000aac <TIMER_NOW+0x4c>
 8000d8e:	bf00      	nop
 8000d90:	fefdfbf7 	.word	0xfefdfbf7
 8000d94:	20000000 	.word	0x20000000
 8000d98:	08004590 	.word	0x08004590
 8000d9c:	1b4e81b5 	.word	0x1b4e81b5
 8000da0:	88888889 	.word	0x88888889
 8000da4:	cccccccd 	.word	0xcccccccd
 8000da8:	20000020 	.word	0x20000020
 8000dac:	20000008 	.word	0x20000008

08000db0 <OLED_TIMER>:
	    }
	  }
}

void OLED_TIMER(uint8_t OLED_Keys[4]){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	oled_SetCursor(20, 20); //change 0 to i
 8000db8:	2114      	movs	r1, #20
 8000dba:	2014      	movs	r0, #20
 8000dbc:	f000 fa16 	bl	80011ec <oled_SetCursor>
	for (int i = 3; i >= 0; i--) {
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	e014      	b.n	8000df0 <OLED_TIMER+0x40>
			if (i == 1){
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <OLED_TIMER+0x28>
				//0x3A - ':'
				oled_WriteChar(0x3A, Font_11x18, White); //change font
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <OLED_TIMER+0x54>)
 8000dce:	2301      	movs	r3, #1
 8000dd0:	ca06      	ldmia	r2, {r1, r2}
 8000dd2:	203a      	movs	r0, #58	; 0x3a
 8000dd4:	f000 f964 	bl	80010a0 <oled_WriteChar>
			}
			oled_WriteChar(OLED_Keys[i], Font_11x18, White);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	7818      	ldrb	r0, [r3, #0]
 8000de0:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <OLED_TIMER+0x54>)
 8000de2:	2301      	movs	r3, #1
 8000de4:	ca06      	ldmia	r2, {r1, r2}
 8000de6:	f000 f95b 	bl	80010a0 <oled_WriteChar>
	for (int i = 3; i >= 0; i--) {
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	dae7      	bge.n	8000dc6 <OLED_TIMER+0x16>
		}
		oled_UpdateScreen();
 8000df6:	f000 f8c3 	bl	8000f80 <oled_UpdateScreen>
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000000 	.word	0x20000000

08000e08 <oled_Reset>:
			oled_WriteChar(OLED_Keys[j+3*i], Font_7x10, White);
		}
	}
	oled_UpdateScreen();
}
void oled_Reset( void ) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	oled_Fill(Black);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 f893 	bl	8000f38 <oled_Fill>
	oled_SetCursor(0, 0);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 f9e9 	bl	80011ec <oled_SetCursor>
	oled_UpdateScreen();
 8000e1a:	f000 f8b1 	bl	8000f80 <oled_UpdateScreen>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2301      	movs	r3, #1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2178      	movs	r1, #120	; 0x78
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <oled_WriteCommand+0x2c>)
 8000e4e:	f001 f891 	bl	8001f74 <HAL_I2C_Mem_Write>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000468 	.word	0x20000468

08000e60 <oled_Init>:


uint8_t oled_Init(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000e64:	2064      	movs	r0, #100	; 0x64
 8000e66:	f000 fc8b 	bl	8001780 <HAL_Delay>

	oled_WriteCommand(0xAE);
 8000e6a:	20ae      	movs	r0, #174	; 0xae
 8000e6c:	f7ff ffe0 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8000e70:	2020      	movs	r0, #32
 8000e72:	f7ff ffdd 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 8000e76:	2010      	movs	r0, #16
 8000e78:	f7ff ffda 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 8000e7c:	20b0      	movs	r0, #176	; 0xb0
 8000e7e:	f7ff ffd7 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 8000e82:	20c8      	movs	r0, #200	; 0xc8
 8000e84:	f7ff ffd4 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ffd1 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 8000e8e:	2010      	movs	r0, #16
 8000e90:	f7ff ffce 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x40);
 8000e94:	2040      	movs	r0, #64	; 0x40
 8000e96:	f7ff ffcb 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x81);
 8000e9a:	2081      	movs	r0, #129	; 0x81
 8000e9c:	f7ff ffc8 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 8000ea0:	20ff      	movs	r0, #255	; 0xff
 8000ea2:	f7ff ffc5 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 8000ea6:	20a1      	movs	r0, #161	; 0xa1
 8000ea8:	f7ff ffc2 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 8000eac:	20a6      	movs	r0, #166	; 0xa6
 8000eae:	f7ff ffbf 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 8000eb2:	20a8      	movs	r0, #168	; 0xa8
 8000eb4:	f7ff ffbc 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 8000eb8:	203f      	movs	r0, #63	; 0x3f
 8000eba:	f7ff ffb9 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 8000ebe:	20a4      	movs	r0, #164	; 0xa4
 8000ec0:	f7ff ffb6 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 8000ec4:	20d3      	movs	r0, #211	; 0xd3
 8000ec6:	f7ff ffb3 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff ffb0 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 8000ed0:	20d5      	movs	r0, #213	; 0xd5
 8000ed2:	f7ff ffad 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 8000ed6:	20f0      	movs	r0, #240	; 0xf0
 8000ed8:	f7ff ffaa 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 8000edc:	20d9      	movs	r0, #217	; 0xd9
 8000ede:	f7ff ffa7 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x22);
 8000ee2:	2022      	movs	r0, #34	; 0x22
 8000ee4:	f7ff ffa4 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 8000ee8:	20da      	movs	r0, #218	; 0xda
 8000eea:	f7ff ffa1 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x12);
 8000eee:	2012      	movs	r0, #18
 8000ef0:	f7ff ff9e 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 8000ef4:	20db      	movs	r0, #219	; 0xdb
 8000ef6:	f7ff ff9b 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8000efa:	2020      	movs	r0, #32
 8000efc:	f7ff ff98 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 8000f00:	208d      	movs	r0, #141	; 0x8d
 8000f02:	f7ff ff95 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0x14);
 8000f06:	2014      	movs	r0, #20
 8000f08:	f7ff ff92 	bl	8000e30 <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 8000f0c:	20af      	movs	r0, #175	; 0xaf
 8000f0e:	f7ff ff8f 	bl	8000e30 <oled_WriteCommand>

	oled_Fill(Black);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f810 	bl	8000f38 <oled_Fill>

	oled_UpdateScreen();
 8000f18:	f000 f832 	bl	8000f80 <oled_UpdateScreen>

	OLED.CurrentX = 0;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <oled_Init+0xd4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <oled_Init+0xd4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	805a      	strh	r2, [r3, #2]

	OLED.Initialized = 1;
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <oled_Init+0xd4>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	715a      	strb	r2, [r3, #5]

	return 1;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000460 	.word	0x20000460

08000f38 <oled_Fill>:

void oled_Fill(OLED_COLOR color) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	e00d      	b.n	8000f64 <oled_Fill+0x2c>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <oled_Fill+0x1a>
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e000      	b.n	8000f54 <oled_Fill+0x1c>
 8000f52:	21ff      	movs	r1, #255	; 0xff
 8000f54:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <oled_Fill+0x44>)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4413      	add	r3, r2
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f6a:	d3ed      	bcc.n	8000f48 <oled_Fill+0x10>
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000060 	.word	0x20000060

08000f80 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e01d      	b.n	8000fc8 <oled_UpdateScreen+0x48>
		oled_WriteCommand(0xB0 + i);
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	3b50      	subs	r3, #80	; 0x50
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff4c 	bl	8000e30 <oled_WriteCommand>
		oled_WriteCommand(0x00);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff ff49 	bl	8000e30 <oled_WriteCommand>
		oled_WriteCommand(0x10);
 8000f9e:	2010      	movs	r0, #16
 8000fa0:	f7ff ff46 	bl	8000e30 <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,100);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	01db      	lsls	r3, r3, #7
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <oled_UpdateScreen+0x58>)
 8000faa:	4413      	add	r3, r2
 8000fac:	2264      	movs	r2, #100	; 0x64
 8000fae:	9202      	str	r2, [sp, #8]
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	9201      	str	r2, [sp, #4]
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	2240      	movs	r2, #64	; 0x40
 8000fba:	2178      	movs	r1, #120	; 0x78
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <oled_UpdateScreen+0x5c>)
 8000fbe:	f000 ffd9 	bl	8001f74 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b07      	cmp	r3, #7
 8000fcc:	d9de      	bls.n	8000f8c <oled_UpdateScreen+0xc>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000060 	.word	0x20000060
 8000fdc:	20000468 	.word	0x20000468

08000fe0 <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	460b      	mov	r3, r1
 8000fec:	71bb      	strb	r3, [r7, #6]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	717b      	strb	r3, [r7, #5]
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db48      	blt.n	800108c <oled_DrawPixel+0xac>
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	2b3f      	cmp	r3, #63	; 0x3f
 8000ffe:	d845      	bhi.n	800108c <oled_DrawPixel+0xac>
		return;
	}

	if (OLED.Inverted) {
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <oled_DrawPixel+0xb8>)
 8001002:	791b      	ldrb	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d006      	beq.n	8001016 <oled_DrawPixel+0x36>
		color = (OLED_COLOR)!color;
 8001008:	797b      	ldrb	r3, [r7, #5]
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf0c      	ite	eq
 800100e:	2301      	moveq	r3, #1
 8001010:	2300      	movne	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	717b      	strb	r3, [r7, #5]
	}

	if (color == White) {
 8001016:	797b      	ldrb	r3, [r7, #5]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d11a      	bne.n	8001052 <oled_DrawPixel+0x72>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 800101c:	79fa      	ldrb	r2, [r7, #7]
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	b2d8      	uxtb	r0, r3
 8001024:	4603      	mov	r3, r0
 8001026:	01db      	lsls	r3, r3, #7
 8001028:	4413      	add	r3, r2
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <oled_DrawPixel+0xbc>)
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	b25a      	sxtb	r2, r3
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	2101      	movs	r1, #1
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	b25b      	sxtb	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b259      	sxtb	r1, r3
 8001042:	79fa      	ldrb	r2, [r7, #7]
 8001044:	4603      	mov	r3, r0
 8001046:	01db      	lsls	r3, r3, #7
 8001048:	4413      	add	r3, r2
 800104a:	b2c9      	uxtb	r1, r1
 800104c:	4a13      	ldr	r2, [pc, #76]	; (800109c <oled_DrawPixel+0xbc>)
 800104e:	54d1      	strb	r1, [r2, r3]
 8001050:	e01d      	b.n	800108e <oled_DrawPixel+0xae>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8001052:	79fa      	ldrb	r2, [r7, #7]
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	08db      	lsrs	r3, r3, #3
 8001058:	b2d8      	uxtb	r0, r3
 800105a:	4603      	mov	r3, r0
 800105c:	01db      	lsls	r3, r3, #7
 800105e:	4413      	add	r3, r2
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <oled_DrawPixel+0xbc>)
 8001062:	5cd3      	ldrb	r3, [r2, r3]
 8001064:	b25a      	sxtb	r2, r3
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	2101      	movs	r1, #1
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	b25b      	sxtb	r3, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	b25b      	sxtb	r3, r3
 8001078:	4013      	ands	r3, r2
 800107a:	b259      	sxtb	r1, r3
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	4603      	mov	r3, r0
 8001080:	01db      	lsls	r3, r3, #7
 8001082:	4413      	add	r3, r2
 8001084:	b2c9      	uxtb	r1, r1
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <oled_DrawPixel+0xbc>)
 8001088:	54d1      	strb	r1, [r2, r3]
 800108a:	e000      	b.n	800108e <oled_DrawPixel+0xae>
		return;
 800108c:	bf00      	nop
	}
}
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	20000460 	.word	0x20000460
 800109c:	20000060 	.word	0x20000060

080010a0 <oled_WriteChar>:
	oled_DrawHLine(x1, x2, y1, color);
	oled_DrawHLine(x1, x2, y2, color);
	oled_DrawVLine(y1, y2, x1, color);
	oled_DrawVLine(y1, y2, x2, color);
}
char oled_WriteChar(char ch, FontDef Font, OLED_COLOR color) {
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4604      	mov	r4, r0
 80010a8:	1d38      	adds	r0, r7, #4
 80010aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80010ae:	461a      	mov	r2, r3
 80010b0:	4623      	mov	r3, r4
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	4613      	mov	r3, r2
 80010b6:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 80010b8:	4b38      	ldr	r3, [pc, #224]	; (800119c <oled_WriteChar+0xfc>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	793b      	ldrb	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	2b7f      	cmp	r3, #127	; 0x7f
 80010c4:	dc06      	bgt.n	80010d4 <oled_WriteChar+0x34>
			OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight)) {
 80010c6:	4b35      	ldr	r3, [pc, #212]	; (800119c <oled_WriteChar+0xfc>)
 80010c8:	885b      	ldrh	r3, [r3, #2]
 80010ca:	461a      	mov	r2, r3
 80010cc:	797b      	ldrb	r3, [r7, #5]
 80010ce:	4413      	add	r3, r2
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 80010d0:	2b3f      	cmp	r3, #63	; 0x3f
 80010d2:	dd01      	ble.n	80010d8 <oled_WriteChar+0x38>
		return 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e05d      	b.n	8001194 <oled_WriteChar+0xf4>
	}

	for (i = 0; i < Font.FontHeight; i++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	e04c      	b.n	8001178 <oled_WriteChar+0xd8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	3b20      	subs	r3, #32
 80010e4:	7979      	ldrb	r1, [r7, #5]
 80010e6:	fb01 f303 	mul.w	r3, r1, r3
 80010ea:	4619      	mov	r1, r3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	440b      	add	r3, r1
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	e034      	b.n	8001168 <oled_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d012      	beq.n	8001134 <oled_WriteChar+0x94>
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <oled_WriteChar+0xfc>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4413      	add	r3, r2
 800111a:	b2d8      	uxtb	r0, r3
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <oled_WriteChar+0xfc>)
 800111e:	885b      	ldrh	r3, [r3, #2]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4413      	add	r3, r2
 8001128:	b2db      	uxtb	r3, r3
 800112a:	7bba      	ldrb	r2, [r7, #14]
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff ff57 	bl	8000fe0 <oled_DrawPixel>
 8001132:	e016      	b.n	8001162 <oled_WriteChar+0xc2>
			} else {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <oled_WriteChar+0xfc>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4413      	add	r3, r2
 8001140:	b2d8      	uxtb	r0, r3
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <oled_WriteChar+0xfc>)
 8001144:	885b      	ldrh	r3, [r3, #2]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4413      	add	r3, r2
 800114e:	b2d9      	uxtb	r1, r3
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	2b00      	cmp	r3, #0
 8001154:	bf0c      	ite	eq
 8001156:	2301      	moveq	r3, #1
 8001158:	2300      	movne	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	f7ff ff3f 	bl	8000fe0 <oled_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	3301      	adds	r3, #1
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	793b      	ldrb	r3, [r7, #4]
 800116a:	461a      	mov	r2, r3
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	4293      	cmp	r3, r2
 8001170:	d3c5      	bcc.n	80010fe <oled_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++) {
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3301      	adds	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	461a      	mov	r2, r3
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	4293      	cmp	r3, r2
 8001180:	d3ad      	bcc.n	80010de <oled_WriteChar+0x3e>
			}
		}
	}

	OLED.CurrentX += Font.FontWidth;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <oled_WriteChar+0xfc>)
 8001184:	881a      	ldrh	r2, [r3, #0]
 8001186:	793b      	ldrb	r3, [r7, #4]
 8001188:	b29b      	uxth	r3, r3
 800118a:	4413      	add	r3, r2
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b03      	ldr	r3, [pc, #12]	; (800119c <oled_WriteChar+0xfc>)
 8001190:	801a      	strh	r2, [r3, #0]

	return ch;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3724      	adds	r7, #36	; 0x24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	20000460 	.word	0x20000460

080011a0 <oled_WriteString>:


char oled_WriteString(char* str, FontDef Font, OLED_COLOR color) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	1d38      	adds	r0, r7, #4
 80011aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80011ae:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 80011b0:	e012      	b.n	80011d8 <oled_WriteString+0x38>
		if (oled_WriteChar(*str, Font, color) != *str) {
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	7818      	ldrb	r0, [r3, #0]
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	1d3a      	adds	r2, r7, #4
 80011ba:	ca06      	ldmia	r2, {r1, r2}
 80011bc:	f7ff ff70 	bl	80010a0 <oled_WriteChar>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d002      	beq.n	80011d2 <oled_WriteString+0x32>
			return *str;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	e008      	b.n	80011e4 <oled_WriteString+0x44>
		}
		str++;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1e8      	bne.n	80011b2 <oled_WriteString+0x12>
	}
	return *str;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	781b      	ldrb	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
	OLED.CurrentX = x;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <oled_SetCursor+0x2c>)
 8001202:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = y;
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <oled_SetCursor+0x2c>)
 800120a:	805a      	strh	r2, [r3, #2]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	20000460 	.word	0x20000460

0800121c <PCA9538_Read_Register>:
#include "main.h"
#include "i2c.h"
#include "sdk_uart.h"
#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af04      	add	r7, sp, #16
 8001222:	4603      	mov	r3, r0
 8001224:	603a      	str	r2, [r7, #0]
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	460b      	mov	r3, r1
 800122a:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	b299      	uxth	r1, r3
 8001234:	797b      	ldrb	r3, [r7, #5]
 8001236:	b29a      	uxth	r2, r3
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <PCA9538_Read_Register+0x3c>)
 8001248:	f000 ff8e 	bl	8002168 <HAL_I2C_Mem_Read>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000468 	.word	0x20000468

0800125c <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af04      	add	r7, sp, #16
 8001262:	4603      	mov	r3, r0
 8001264:	603a      	str	r2, [r7, #0]
 8001266:	80fb      	strh	r3, [r7, #6]
 8001268:	460b      	mov	r3, r1
 800126a:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	b299      	uxth	r1, r3
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	b29a      	uxth	r2, r3
 8001278:	2364      	movs	r3, #100	; 0x64
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	2301      	movs	r3, #1
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <PCA9538_Write_Register+0x3c>)
 8001288:	f000 fe74 	bl	8001f74 <HAL_I2C_Mem_Write>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000468 	.word	0x20000468

0800129c <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ffb4 	bl	800121c <PCA9538_Read_Register>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <UART_Transmit>:
#include "sdk_uart.h"
#include "usart.h"
#include <string.h>


void UART_Transmit(uint8_t data[]){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, data, strlen((const char*)data), 1000);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7fe ff8f 	bl	80001ec <strlen>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <UART_Transmit+0x28>)
 80012da:	f002 fe28 	bl	8003f2e <HAL_UART_Transmit>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000504 	.word	0x20000504

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <HAL_MspInit+0x4c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_MspInit+0x4c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 f9d6 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <SystemInit+0x60>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a2:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <SystemInit+0x60>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <SystemInit+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a12      	ldr	r2, [pc, #72]	; (80013fc <SystemInit+0x64>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <SystemInit+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <SystemInit+0x64>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <SystemInit+0x64>)
 80013c4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <SystemInit+0x64>)
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <SystemInit+0x68>)
 80013d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <SystemInit+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a08      	ldr	r2, [pc, #32]	; (80013fc <SystemInit+0x64>)
 80013da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SystemInit+0x60>)
 80013e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ec:	609a      	str	r2, [r3, #8]
#endif
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00
 80013fc:	40023800 	.word	0x40023800
 8001400:	24003010 	.word	0x24003010

08001404 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <MX_TIM2_Init+0xac>)
 8001428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800142c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <MX_TIM2_Init+0xac>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_TIM2_Init+0xac>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_TIM2_Init+0xac>)
 800143c:	220a      	movs	r2, #10
 800143e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_TIM2_Init+0xac>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM2_Init+0xac>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800144c:	4818      	ldr	r0, [pc, #96]	; (80014b0 <MX_TIM2_Init+0xac>)
 800144e:	f002 f91d 	bl	800368c <HAL_TIM_PWM_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001458:	f7ff fce3 	bl	8000e22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001464:	f107 0320 	add.w	r3, r7, #32
 8001468:	4619      	mov	r1, r3
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <MX_TIM2_Init+0xac>)
 800146c:	f002 fc96 	bl	8003d9c <HAL_TIMEx_MasterConfigSynchronization>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001476:	f7ff fcd4 	bl	8000e22 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147a:	2360      	movs	r3, #96	; 0x60
 800147c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	4619      	mov	r1, r3
 8001490:	4807      	ldr	r0, [pc, #28]	; (80014b0 <MX_TIM2_Init+0xac>)
 8001492:	f002 f94b 	bl	800372c <HAL_TIM_PWM_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800149c:	f7ff fcc1 	bl	8000e22 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80014a0:	4803      	ldr	r0, [pc, #12]	; (80014b0 <MX_TIM2_Init+0xac>)
 80014a2:	f000 f827 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200004bc 	.word	0x200004bc

080014b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c4:	d10d      	bne.n	80014e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001514:	d11d      	bne.n	8001552 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_TIM_MspPostInit+0x68>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <HAL_TIM_MspPostInit+0x68>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_TIM_MspPostInit+0x68>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001532:	2320      	movs	r3, #32
 8001534:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001542:	2301      	movs	r3, #1
 8001544:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	4619      	mov	r1, r3
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <HAL_TIM_MspPostInit+0x6c>)
 800154e:	f000 fa21 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000

08001564 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <MX_USART6_UART_Init+0x50>)
 800156c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 8001570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001574:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 800159c:	f002 fc7a 	bl	8003e94 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015a6:	f7ff fc3c 	bl	8000e22 <Error_Handler>
  }

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000504 	.word	0x20000504
 80015b4:	40011400 	.word	0x40011400

080015b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_UART_MspInit+0x84>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d12b      	bne.n	8001632 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_UART_MspInit+0x88>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_UART_MspInit+0x88>)
 80015e4:	f043 0320 	orr.w	r3, r3, #32
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_MspInit+0x88>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_UART_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <HAL_UART_MspInit+0x88>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_UART_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001612:	23c0      	movs	r3, #192	; 0xc0
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001622:	2308      	movs	r3, #8
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_UART_MspInit+0x8c>)
 800162e:	f000 f9b1 	bl	8001994 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40011400 	.word	0x40011400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020800 	.word	0x40020800

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	; (8001688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	; (8001694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001672:	f7ff fe91 	bl	8001398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f002 ff23 	bl	80044c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff f96f 	bl	800095c <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 800168c:	080053a0 	.word	0x080053a0
  ldr r2, =_sbss
 8001690:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001694:	2000054c 	.word	0x2000054c

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <HAL_Init+0x40>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_Init+0x40>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x40>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f931 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fe0c 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f93b 	bl	800197a <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f911 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000038 	.word	0x20000038
 8001738:	20000040 	.word	0x20000040
 800173c:	2000003c 	.word	0x2000003c

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000040 	.word	0x20000040
 8001764:	20000548 	.word	0x20000548

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000548 	.word	0x20000548

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000040 	.word	0x20000040

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff47 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff5c 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffb0 	bl	80018e8 <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	e177      	b.n	8001ca0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b0:	2201      	movs	r2, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f040 8166 	bne.w	8001c9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d005      	beq.n	80019e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d130      	bne.n	8001a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 0201 	and.w	r2, r3, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d017      	beq.n	8001a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d123      	bne.n	8001ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	08da      	lsrs	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3208      	adds	r2, #8
 8001a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	08da      	lsrs	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3208      	adds	r2, #8
 8001ad2:	69b9      	ldr	r1, [r7, #24]
 8001ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80c0 	beq.w	8001c9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b66      	ldr	r3, [pc, #408]	; (8001cb8 <HAL_GPIO_Init+0x324>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a65      	ldr	r2, [pc, #404]	; (8001cb8 <HAL_GPIO_Init+0x324>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <HAL_GPIO_Init+0x324>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b36:	4a61      	ldr	r2, [pc, #388]	; (8001cbc <HAL_GPIO_Init+0x328>)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_GPIO_Init+0x32c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d037      	beq.n	8001bd2 <HAL_GPIO_Init+0x23e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a57      	ldr	r2, [pc, #348]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d031      	beq.n	8001bce <HAL_GPIO_Init+0x23a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a56      	ldr	r2, [pc, #344]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d02b      	beq.n	8001bca <HAL_GPIO_Init+0x236>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a55      	ldr	r2, [pc, #340]	; (8001ccc <HAL_GPIO_Init+0x338>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d025      	beq.n	8001bc6 <HAL_GPIO_Init+0x232>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a54      	ldr	r2, [pc, #336]	; (8001cd0 <HAL_GPIO_Init+0x33c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01f      	beq.n	8001bc2 <HAL_GPIO_Init+0x22e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a53      	ldr	r2, [pc, #332]	; (8001cd4 <HAL_GPIO_Init+0x340>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x22a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a52      	ldr	r2, [pc, #328]	; (8001cd8 <HAL_GPIO_Init+0x344>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x226>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a51      	ldr	r2, [pc, #324]	; (8001cdc <HAL_GPIO_Init+0x348>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x222>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a50      	ldr	r2, [pc, #320]	; (8001ce0 <HAL_GPIO_Init+0x34c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x21e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4f      	ldr	r2, [pc, #316]	; (8001ce4 <HAL_GPIO_Init+0x350>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x21a>
 8001baa:	2309      	movs	r3, #9
 8001bac:	e012      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bae:	230a      	movs	r3, #10
 8001bb0:	e010      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	e00e      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	e00c      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bba:	2306      	movs	r3, #6
 8001bbc:	e00a      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e008      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e004      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e002      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_GPIO_Init+0x240>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	f002 0203 	and.w	r2, r2, #3
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	4093      	lsls	r3, r2
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be4:	4935      	ldr	r1, [pc, #212]	; (8001cbc <HAL_GPIO_Init+0x328>)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c16:	4a34      	ldr	r2, [pc, #208]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c40:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c46:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <HAL_GPIO_Init+0x354>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	f67f ae84 	bls.w	80019b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40021400 	.word	0x40021400
 8001cd8:	40021800 	.word	0x40021800
 8001cdc:	40021c00 	.word	0x40021c00
 8001ce0:	40022000 	.word	0x40022000
 8001ce4:	40022400 	.word	0x40022400
 8001ce8:	40013c00 	.word	0x40013c00

08001cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e12b      	b.n	8001f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe fce0 	bl	80006d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2224      	movs	r2, #36	; 0x24
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d50:	f001 fbac 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8001d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a81      	ldr	r2, [pc, #516]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d807      	bhi.n	8001d70 <HAL_I2C_Init+0x84>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_I2C_Init+0x278>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	bf94      	ite	ls
 8001d68:	2301      	movls	r3, #1
 8001d6a:	2300      	movhi	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	e006      	b.n	8001d7e <HAL_I2C_Init+0x92>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4a7d      	ldr	r2, [pc, #500]	; (8001f68 <HAL_I2C_Init+0x27c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	bf94      	ite	ls
 8001d78:	2301      	movls	r3, #1
 8001d7a:	2300      	movhi	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0e7      	b.n	8001f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4a78      	ldr	r2, [pc, #480]	; (8001f6c <HAL_I2C_Init+0x280>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0c9b      	lsrs	r3, r3, #18
 8001d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a6a      	ldr	r2, [pc, #424]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d802      	bhi.n	8001dc0 <HAL_I2C_Init+0xd4>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	e009      	b.n	8001dd4 <HAL_I2C_Init+0xe8>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	4a69      	ldr	r2, [pc, #420]	; (8001f70 <HAL_I2C_Init+0x284>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001de6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	495c      	ldr	r1, [pc, #368]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001df0:	428b      	cmp	r3, r1
 8001df2:	d819      	bhi.n	8001e28 <HAL_I2C_Init+0x13c>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1e59      	subs	r1, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e02:	1c59      	adds	r1, r3, #1
 8001e04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e08:	400b      	ands	r3, r1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <HAL_I2C_Init+0x138>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e59      	subs	r1, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e22:	e051      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e24:	2304      	movs	r3, #4
 8001e26:	e04f      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d111      	bne.n	8001e54 <HAL_I2C_Init+0x168>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e58      	subs	r0, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	440b      	add	r3, r1
 8001e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e012      	b.n	8001e7a <HAL_I2C_Init+0x18e>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e58      	subs	r0, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	0099      	lsls	r1, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Init+0x196>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e022      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10e      	bne.n	8001ea8 <HAL_I2C_Init+0x1bc>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e58      	subs	r0, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	440b      	add	r3, r1
 8001e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea6:	e00f      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	0099      	lsls	r1, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	6809      	ldr	r1, [r1, #0]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6911      	ldr	r1, [r2, #16]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68d2      	ldr	r2, [r2, #12]
 8001f02:	4311      	orrs	r1, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	000186a0 	.word	0x000186a0
 8001f64:	001e847f 	.word	0x001e847f
 8001f68:	003d08ff 	.word	0x003d08ff
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	10624dd3 	.word	0x10624dd3

08001f74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	4611      	mov	r1, r2
 8001f80:	461a      	mov	r2, r3
 8001f82:	4603      	mov	r3, r0
 8001f84:	817b      	strh	r3, [r7, #10]
 8001f86:	460b      	mov	r3, r1
 8001f88:	813b      	strh	r3, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f8e:	f7ff fbeb 	bl	8001768 <HAL_GetTick>
 8001f92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	f040 80d9 	bne.w	8002154 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2319      	movs	r3, #25
 8001fa8:	2201      	movs	r2, #1
 8001faa:	496d      	ldr	r1, [pc, #436]	; (8002160 <HAL_I2C_Mem_Write+0x1ec>)
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 fc7f 	bl	80028b0 <I2C_WaitOnFlagUntilTimeout>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e0cc      	b.n	8002156 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_I2C_Mem_Write+0x56>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e0c5      	b.n	8002156 <HAL_I2C_Mem_Write+0x1e2>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d007      	beq.n	8001ff0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2221      	movs	r2, #33	; 0x21
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2240      	movs	r2, #64	; 0x40
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002020:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a4d      	ldr	r2, [pc, #308]	; (8002164 <HAL_I2C_Mem_Write+0x1f0>)
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002032:	88f8      	ldrh	r0, [r7, #6]
 8002034:	893a      	ldrh	r2, [r7, #8]
 8002036:	8979      	ldrh	r1, [r7, #10]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	4603      	mov	r3, r0
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fab6 	bl	80025b4 <I2C_RequestMemoryWrite>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d052      	beq.n	80020f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e081      	b.n	8002156 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fd00 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00d      	beq.n	800207e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b04      	cmp	r3, #4
 8002068:	d107      	bne.n	800207a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002078:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06b      	b.n	8002156 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d11b      	bne.n	80020f4 <HAL_I2C_Mem_Write+0x180>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d017      	beq.n	80020f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1aa      	bne.n	8002052 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fcec 	bl	8002ade <I2C_WaitOnBTFFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b04      	cmp	r3, #4
 8002112:	d107      	bne.n	8002124 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002122:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e016      	b.n	8002156 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e000      	b.n	8002156 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002154:	2302      	movs	r3, #2
  }
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	00100002 	.word	0x00100002
 8002164:	ffff0000 	.word	0xffff0000

08002168 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002182:	f7ff faf1 	bl	8001768 <HAL_GetTick>
 8002186:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b20      	cmp	r3, #32
 8002192:	f040 8208 	bne.w	80025a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2319      	movs	r3, #25
 800219c:	2201      	movs	r2, #1
 800219e:	497b      	ldr	r1, [pc, #492]	; (800238c <HAL_I2C_Mem_Read+0x224>)
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fb85 	bl	80028b0 <I2C_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	e1fb      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_I2C_Mem_Read+0x56>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e1f4      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d007      	beq.n	80021e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2222      	movs	r2, #34	; 0x22
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a5b      	ldr	r2, [pc, #364]	; (8002390 <HAL_I2C_Mem_Read+0x228>)
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002226:	88f8      	ldrh	r0, [r7, #6]
 8002228:	893a      	ldrh	r2, [r7, #8]
 800222a:	8979      	ldrh	r1, [r7, #10]
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4603      	mov	r3, r0
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fa52 	bl	80026e0 <I2C_RequestMemoryRead>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1b0      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	2b00      	cmp	r3, #0
 800224c:	d113      	bne.n	8002276 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	623b      	str	r3, [r7, #32]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	623b      	str	r3, [r7, #32]
 8002262:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e184      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	2b01      	cmp	r3, #1
 800227c:	d11b      	bne.n	80022b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800228c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e164      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d11b      	bne.n	80022f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	e144      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800230c:	e138      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	2b03      	cmp	r3, #3
 8002314:	f200 80f1 	bhi.w	80024fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	2b01      	cmp	r3, #1
 800231e:	d123      	bne.n	8002368 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fc1b 	bl	8002b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e139      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002366:	e10b      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	2b02      	cmp	r3, #2
 800236e:	d14e      	bne.n	800240e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002376:	2200      	movs	r2, #0
 8002378:	4906      	ldr	r1, [pc, #24]	; (8002394 <HAL_I2C_Mem_Read+0x22c>)
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fa98 	bl	80028b0 <I2C_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e10e      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
 800238a:	bf00      	nop
 800238c:	00100002 	.word	0x00100002
 8002390:	ffff0000 	.word	0xffff0000
 8002394:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800240c:	e0b8      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002414:	2200      	movs	r2, #0
 8002416:	4966      	ldr	r1, [pc, #408]	; (80025b0 <HAL_I2C_Mem_Read+0x448>)
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fa49 	bl	80028b0 <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0bf      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002470:	2200      	movs	r2, #0
 8002472:	494f      	ldr	r1, [pc, #316]	; (80025b0 <HAL_I2C_Mem_Read+0x448>)
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fa1b 	bl	80028b0 <I2C_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e091      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024f8:	e042      	b.n	8002580 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fb2e 	bl	8002b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e04c      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b04      	cmp	r3, #4
 800254c:	d118      	bne.n	8002580 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f aec2 	bne.w	800230e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
  }
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3728      	adds	r7, #40	; 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	00010004 	.word	0x00010004

080025b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	4608      	mov	r0, r1
 80025be:	4611      	mov	r1, r2
 80025c0:	461a      	mov	r2, r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	817b      	strh	r3, [r7, #10]
 80025c6:	460b      	mov	r3, r1
 80025c8:	813b      	strh	r3, [r7, #8]
 80025ca:	4613      	mov	r3, r2
 80025cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f960 	bl	80028b0 <I2C_WaitOnFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00d      	beq.n	8002612 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002604:	d103      	bne.n	800260e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e05f      	b.n	80026d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002612:	897b      	ldrh	r3, [r7, #10]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002620:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	6a3a      	ldr	r2, [r7, #32]
 8002626:	492d      	ldr	r1, [pc, #180]	; (80026dc <I2C_RequestMemoryWrite+0x128>)
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f998 	bl	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e04c      	b.n	80026d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800264e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002650:	6a39      	ldr	r1, [r7, #32]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fa02 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00d      	beq.n	800267a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2b04      	cmp	r3, #4
 8002664:	d107      	bne.n	8002676 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002674:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e02b      	b.n	80026d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002680:	893b      	ldrh	r3, [r7, #8]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	e021      	b.n	80026d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800268c:	893b      	ldrh	r3, [r7, #8]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	b29b      	uxth	r3, r3
 8002692:	b2da      	uxtb	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800269a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269c:	6a39      	ldr	r1, [r7, #32]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f9dc 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00d      	beq.n	80026c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d107      	bne.n	80026c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e005      	b.n	80026d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026c6:	893b      	ldrh	r3, [r7, #8]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	00010002 	.word	0x00010002

080026e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	4608      	mov	r0, r1
 80026ea:	4611      	mov	r1, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	817b      	strh	r3, [r7, #10]
 80026f2:	460b      	mov	r3, r1
 80026f4:	813b      	strh	r3, [r7, #8]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002708:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002718:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	2200      	movs	r2, #0
 8002722:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f8c2 	bl	80028b0 <I2C_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002740:	d103      	bne.n	800274a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e0aa      	b.n	80028a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800274e:	897b      	ldrh	r3, [r7, #10]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800275c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	6a3a      	ldr	r2, [r7, #32]
 8002762:	4952      	ldr	r1, [pc, #328]	; (80028ac <I2C_RequestMemoryRead+0x1cc>)
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f8fa 	bl	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e097      	b.n	80028a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	6a39      	ldr	r1, [r7, #32]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f964 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d107      	bne.n	80027b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e076      	b.n	80028a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027bc:	893b      	ldrh	r3, [r7, #8]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	611a      	str	r2, [r3, #16]
 80027c6:	e021      	b.n	800280c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027c8:	893b      	ldrh	r3, [r7, #8]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	6a39      	ldr	r1, [r7, #32]
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f93e 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d107      	bne.n	80027fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e050      	b.n	80028a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002802:	893b      	ldrh	r3, [r7, #8]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	6a39      	ldr	r1, [r7, #32]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f923 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00d      	beq.n	8002838 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2b04      	cmp	r3, #4
 8002822:	d107      	bne.n	8002834 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002832:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e035      	b.n	80028a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002846:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	2200      	movs	r2, #0
 8002850:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f82b 	bl	80028b0 <I2C_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00d      	beq.n	800287c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286e:	d103      	bne.n	8002878 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e013      	b.n	80028a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800287c:	897b      	ldrh	r3, [r7, #10]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	6a3a      	ldr	r2, [r7, #32]
 8002890:	4906      	ldr	r1, [pc, #24]	; (80028ac <I2C_RequestMemoryRead+0x1cc>)
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f863 	bl	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	00010002 	.word	0x00010002

080028b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	4613      	mov	r3, r2
 80028be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c0:	e025      	b.n	800290e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d021      	beq.n	800290e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ca:	f7fe ff4d 	bl	8001768 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d302      	bcc.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d116      	bne.n	800290e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f043 0220 	orr.w	r2, r3, #32
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e023      	b.n	8002956 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d10d      	bne.n	8002934 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4013      	ands	r3, r2
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	e00c      	b.n	800294e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4013      	ands	r3, r2
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf0c      	ite	eq
 8002946:	2301      	moveq	r3, #1
 8002948:	2300      	movne	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	429a      	cmp	r2, r3
 8002952:	d0b6      	beq.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800296c:	e051      	b.n	8002a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297c:	d123      	bne.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002996:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f043 0204 	orr.w	r2, r3, #4
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e046      	b.n	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d021      	beq.n	8002a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ce:	f7fe fecb 	bl	8001768 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d302      	bcc.n	80029e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d116      	bne.n	8002a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e020      	b.n	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d10c      	bne.n	8002a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	43da      	mvns	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4013      	ands	r3, r2
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bf14      	ite	ne
 8002a2e:	2301      	movne	r3, #1
 8002a30:	2300      	moveq	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	e00b      	b.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4013      	ands	r3, r2
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d18d      	bne.n	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a68:	e02d      	b.n	8002ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f8ce 	bl	8002c0c <I2C_IsAcknowledgeFailed>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e02d      	b.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d021      	beq.n	8002ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7fe fe71 	bl	8001768 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d116      	bne.n	8002ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e007      	b.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad0:	2b80      	cmp	r3, #128	; 0x80
 8002ad2:	d1ca      	bne.n	8002a6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aea:	e02d      	b.n	8002b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f88d 	bl	8002c0c <I2C_IsAcknowledgeFailed>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e02d      	b.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b02:	d021      	beq.n	8002b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b04:	f7fe fe30 	bl	8001768 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d302      	bcc.n	8002b1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d116      	bne.n	8002b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e007      	b.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d1ca      	bne.n	8002aec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b6c:	e042      	b.n	8002bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b10      	cmp	r3, #16
 8002b7a:	d119      	bne.n	8002bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0210 	mvn.w	r2, #16
 8002b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e029      	b.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb0:	f7fe fdda 	bl	8001768 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d302      	bcc.n	8002bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d116      	bne.n	8002bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e007      	b.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d1b5      	bne.n	8002b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c22:	d11b      	bne.n	8002c5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f043 0204 	orr.w	r2, r3, #4
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e264      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d075      	beq.n	8002d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8a:	4ba3      	ldr	r3, [pc, #652]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d00c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c96:	4ba0      	ldr	r3, [pc, #640]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d112      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca2:	4b9d      	ldr	r3, [pc, #628]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cae:	d10b      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	4b99      	ldr	r3, [pc, #612]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05b      	beq.n	8002d74 <HAL_RCC_OscConfig+0x108>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d157      	bne.n	8002d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e23f      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x74>
 8002cd2:	4b91      	ldr	r3, [pc, #580]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a90      	ldr	r2, [pc, #576]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e01d      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x98>
 8002cea:	4b8b      	ldr	r3, [pc, #556]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a8a      	ldr	r2, [pc, #552]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b88      	ldr	r3, [pc, #544]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a87      	ldr	r2, [pc, #540]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002d04:	4b84      	ldr	r3, [pc, #528]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a83      	ldr	r2, [pc, #524]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b81      	ldr	r3, [pc, #516]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a80      	ldr	r2, [pc, #512]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe fd20 	bl	8001768 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fd1c 	bl	8001768 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e204      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b76      	ldr	r3, [pc, #472]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0xc0>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fd0c 	bl	8001768 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe fd08 	bl	8001768 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1f0      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	4b6c      	ldr	r3, [pc, #432]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0xe8>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d063      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d82:	4b65      	ldr	r3, [pc, #404]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8e:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d11c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9a:	4b5f      	ldr	r3, [pc, #380]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d116      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	4b5c      	ldr	r3, [pc, #368]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_RCC_OscConfig+0x152>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1c4      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbe:	4b56      	ldr	r3, [pc, #344]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4952      	ldr	r1, [pc, #328]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	e03a      	b.n	8002e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	; (8002f1c <HAL_RCC_OscConfig+0x2b0>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7fe fcc1 	bl	8001768 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dea:	f7fe fcbd 	bl	8001768 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1a5      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	4b46      	ldr	r3, [pc, #280]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b43      	ldr	r3, [pc, #268]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4940      	ldr	r1, [pc, #256]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
 8002e1c:	e015      	b.n	8002e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1e:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <HAL_RCC_OscConfig+0x2b0>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fca0 	bl	8001768 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fc9c 	bl	8001768 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e184      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d030      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_RCC_OscConfig+0x2b4>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fe fc80 	bl	8001768 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fc7c 	bl	8001768 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e164      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x200>
 8002e8a:	e015      	b.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_OscConfig+0x2b4>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e92:	f7fe fc69 	bl	8001768 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9a:	f7fe fc65 	bl	8001768 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e14d      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80a0 	beq.w	8003006 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eca:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_OscConfig+0x2b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d121      	bne.n	8002f46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_RCC_OscConfig+0x2b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_RCC_OscConfig+0x2b8>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fc2b 	bl	8001768 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	e011      	b.n	8002f3a <HAL_RCC_OscConfig+0x2ce>
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	42470000 	.word	0x42470000
 8002f20:	42470e80 	.word	0x42470e80
 8002f24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f28:	f7fe fc1e 	bl	8001768 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e106      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b85      	ldr	r3, [pc, #532]	; (8003150 <HAL_RCC_OscConfig+0x4e4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d106      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
 8002f4e:	4b81      	ldr	r3, [pc, #516]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a80      	ldr	r2, [pc, #512]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5a:	e01c      	b.n	8002f96 <HAL_RCC_OscConfig+0x32a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	d10c      	bne.n	8002f7e <HAL_RCC_OscConfig+0x312>
 8002f64:	4b7b      	ldr	r3, [pc, #492]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a7a      	ldr	r2, [pc, #488]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f6a:	f043 0304 	orr.w	r3, r3, #4
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	4b78      	ldr	r3, [pc, #480]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a77      	ldr	r2, [pc, #476]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7c:	e00b      	b.n	8002f96 <HAL_RCC_OscConfig+0x32a>
 8002f7e:	4b75      	ldr	r3, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a74      	ldr	r2, [pc, #464]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	4b72      	ldr	r3, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a71      	ldr	r2, [pc, #452]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f90:	f023 0304 	bic.w	r3, r3, #4
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d015      	beq.n	8002fca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fe fbe3 	bl	8001768 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fe fbdf 	bl	8001768 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e0c5      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbc:	4b65      	ldr	r3, [pc, #404]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ee      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x33a>
 8002fc8:	e014      	b.n	8002ff4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fca:	f7fe fbcd 	bl	8001768 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd2:	f7fe fbc9 	bl	8001768 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0af      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe8:	4b5a      	ldr	r3, [pc, #360]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1ee      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4b56      	ldr	r3, [pc, #344]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a55      	ldr	r2, [pc, #340]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 809b 	beq.w	8003146 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003010:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b08      	cmp	r3, #8
 800301a:	d05c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d141      	bne.n	80030a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003024:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <HAL_RCC_OscConfig+0x4ec>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7fe fb9d 	bl	8001768 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003032:	f7fe fb99 	bl	8001768 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e081      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003044:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f0      	bne.n	8003032 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	019b      	lsls	r3, r3, #6
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	3b01      	subs	r3, #1
 800306a:	041b      	lsls	r3, r3, #16
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	4937      	ldr	r1, [pc, #220]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <HAL_RCC_OscConfig+0x4ec>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fe fb72 	bl	8001768 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe fb6e 	bl	8001768 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e056      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309a:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x41c>
 80030a6:	e04e      	b.n	8003146 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <HAL_RCC_OscConfig+0x4ec>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe fb5b 	bl	8001768 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe fb57 	bl	8001768 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e03f      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c8:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x44a>
 80030d4:	e037      	b.n	8003146 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e032      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d028      	beq.n	8003142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d121      	bne.n	8003142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d11a      	bne.n	8003142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003112:	4013      	ands	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003118:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311a:	4293      	cmp	r3, r2
 800311c:	d111      	bne.n	8003142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	3b01      	subs	r3, #1
 800312c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d107      	bne.n	8003142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40007000 	.word	0x40007000
 8003154:	40023800 	.word	0x40023800
 8003158:	42470060 	.word	0x42470060

0800315c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0cc      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003170:	4b68      	ldr	r3, [pc, #416]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d90c      	bls.n	8003198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b65      	ldr	r3, [pc, #404]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0b8      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d020      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c8:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	494d      	ldr	r1, [pc, #308]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d044      	beq.n	800327c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d119      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d003      	beq.n	800321a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003216:	2b03      	cmp	r3, #3
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e067      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323a:	4b37      	ldr	r3, [pc, #220]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 0203 	bic.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4934      	ldr	r1, [pc, #208]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800324c:	f7fe fa8c 	bl	8001768 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	e00a      	b.n	800326a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003254:	f7fe fa88 	bl	8001768 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e04f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 020c 	and.w	r2, r3, #12
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	429a      	cmp	r2, r3
 800327a:	d1eb      	bne.n	8003254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d20c      	bcs.n	80032a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e032      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4916      	ldr	r1, [pc, #88]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	490e      	ldr	r1, [pc, #56]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032e2:	f000 f821 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	490a      	ldr	r1, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1c8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe f9ec 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023c00 	.word	0x40023c00
 8003318:	40023800 	.word	0x40023800
 800331c:	08005378 	.word	0x08005378
 8003320:	20000038 	.word	0x20000038
 8003324:	2000003c 	.word	0x2000003c

08003328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	b5b0      	push	{r4, r5, r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800332e:	2100      	movs	r1, #0
 8003330:	6079      	str	r1, [r7, #4]
 8003332:	2100      	movs	r1, #0
 8003334:	60f9      	str	r1, [r7, #12]
 8003336:	2100      	movs	r1, #0
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800333a:	2100      	movs	r1, #0
 800333c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800333e:	4952      	ldr	r1, [pc, #328]	; (8003488 <HAL_RCC_GetSysClockFreq+0x160>)
 8003340:	6889      	ldr	r1, [r1, #8]
 8003342:	f001 010c 	and.w	r1, r1, #12
 8003346:	2908      	cmp	r1, #8
 8003348:	d00d      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x3e>
 800334a:	2908      	cmp	r1, #8
 800334c:	f200 8094 	bhi.w	8003478 <HAL_RCC_GetSysClockFreq+0x150>
 8003350:	2900      	cmp	r1, #0
 8003352:	d002      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0x32>
 8003354:	2904      	cmp	r1, #4
 8003356:	d003      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x38>
 8003358:	e08e      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800335a:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCC_GetSysClockFreq+0x164>)
 800335c:	60bb      	str	r3, [r7, #8]
       break;
 800335e:	e08e      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003360:	4b4b      	ldr	r3, [pc, #300]	; (8003490 <HAL_RCC_GetSysClockFreq+0x168>)
 8003362:	60bb      	str	r3, [r7, #8]
      break;
 8003364:	e08b      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003366:	4948      	ldr	r1, [pc, #288]	; (8003488 <HAL_RCC_GetSysClockFreq+0x160>)
 8003368:	6849      	ldr	r1, [r1, #4]
 800336a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800336e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003370:	4945      	ldr	r1, [pc, #276]	; (8003488 <HAL_RCC_GetSysClockFreq+0x160>)
 8003372:	6849      	ldr	r1, [r1, #4]
 8003374:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003378:	2900      	cmp	r1, #0
 800337a:	d024      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337c:	4942      	ldr	r1, [pc, #264]	; (8003488 <HAL_RCC_GetSysClockFreq+0x160>)
 800337e:	6849      	ldr	r1, [r1, #4]
 8003380:	0989      	lsrs	r1, r1, #6
 8003382:	4608      	mov	r0, r1
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	f240 14ff 	movw	r4, #511	; 0x1ff
 800338c:	f04f 0500 	mov.w	r5, #0
 8003390:	ea00 0204 	and.w	r2, r0, r4
 8003394:	ea01 0305 	and.w	r3, r1, r5
 8003398:	493d      	ldr	r1, [pc, #244]	; (8003490 <HAL_RCC_GetSysClockFreq+0x168>)
 800339a:	fb01 f003 	mul.w	r0, r1, r3
 800339e:	2100      	movs	r1, #0
 80033a0:	fb01 f102 	mul.w	r1, r1, r2
 80033a4:	1844      	adds	r4, r0, r1
 80033a6:	493a      	ldr	r1, [pc, #232]	; (8003490 <HAL_RCC_GetSysClockFreq+0x168>)
 80033a8:	fba2 0101 	umull	r0, r1, r2, r1
 80033ac:	1863      	adds	r3, r4, r1
 80033ae:	4619      	mov	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	461a      	mov	r2, r3
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	f7fc ff20 	bl	80001fc <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4613      	mov	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e04a      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_RCC_GetSysClockFreq+0x160>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	461a      	mov	r2, r3
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033d6:	f04f 0100 	mov.w	r1, #0
 80033da:	ea02 0400 	and.w	r4, r2, r0
 80033de:	ea03 0501 	and.w	r5, r3, r1
 80033e2:	4620      	mov	r0, r4
 80033e4:	4629      	mov	r1, r5
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	014b      	lsls	r3, r1, #5
 80033f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033f4:	0142      	lsls	r2, r0, #5
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	1b00      	subs	r0, r0, r4
 80033fc:	eb61 0105 	sbc.w	r1, r1, r5
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	018b      	lsls	r3, r1, #6
 800340a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800340e:	0182      	lsls	r2, r0, #6
 8003410:	1a12      	subs	r2, r2, r0
 8003412:	eb63 0301 	sbc.w	r3, r3, r1
 8003416:	f04f 0000 	mov.w	r0, #0
 800341a:	f04f 0100 	mov.w	r1, #0
 800341e:	00d9      	lsls	r1, r3, #3
 8003420:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003424:	00d0      	lsls	r0, r2, #3
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	1912      	adds	r2, r2, r4
 800342c:	eb45 0303 	adc.w	r3, r5, r3
 8003430:	f04f 0000 	mov.w	r0, #0
 8003434:	f04f 0100 	mov.w	r1, #0
 8003438:	0299      	lsls	r1, r3, #10
 800343a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800343e:	0290      	lsls	r0, r2, #10
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	461a      	mov	r2, r3
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	f7fc fed4 	bl	80001fc <__aeabi_uldivmod>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4613      	mov	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_RCC_GetSysClockFreq+0x160>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	3301      	adds	r3, #1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	60bb      	str	r3, [r7, #8]
      break;
 8003476:	e002      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <HAL_RCC_GetSysClockFreq+0x164>)
 800347a:	60bb      	str	r3, [r7, #8]
      break;
 800347c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347e:	68bb      	ldr	r3, [r7, #8]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bdb0      	pop	{r4, r5, r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	00f42400 	.word	0x00f42400
 8003490:	017d7840 	.word	0x017d7840

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000038 	.word	0x20000038

080034ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034b0:	f7ff fff0 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0a9b      	lsrs	r3, r3, #10
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4903      	ldr	r1, [pc, #12]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40023800 	.word	0x40023800
 80034d0:	08005388 	.word	0x08005388

080034d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034d8:	f7ff ffdc 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0b5b      	lsrs	r3, r3, #13
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4903      	ldr	r1, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	08005388 	.word	0x08005388

080034fc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_TIM_OC_Start+0x24>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e022      	b.n	8003566 <HAL_TIM_OC_Start+0x6a>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b04      	cmp	r3, #4
 8003524:	d109      	bne.n	800353a <HAL_TIM_OC_Start+0x3e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	bf14      	ite	ne
 8003532:	2301      	movne	r3, #1
 8003534:	2300      	moveq	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	e015      	b.n	8003566 <HAL_TIM_OC_Start+0x6a>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b08      	cmp	r3, #8
 800353e:	d109      	bne.n	8003554 <HAL_TIM_OC_Start+0x58>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e008      	b.n	8003566 <HAL_TIM_OC_Start+0x6a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e07c      	b.n	8003668 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <HAL_TIM_OC_Start+0x82>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800357c:	e013      	b.n	80035a6 <HAL_TIM_OC_Start+0xaa>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b04      	cmp	r3, #4
 8003582:	d104      	bne.n	800358e <HAL_TIM_OC_Start+0x92>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358c:	e00b      	b.n	80035a6 <HAL_TIM_OC_Start+0xaa>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b08      	cmp	r3, #8
 8003592:	d104      	bne.n	800359e <HAL_TIM_OC_Start+0xa2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800359c:	e003      	b.n	80035a6 <HAL_TIM_OC_Start+0xaa>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2201      	movs	r2, #1
 80035ac:	6839      	ldr	r1, [r7, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fbce 	bl	8003d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <HAL_TIM_OC_Start+0x174>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_TIM_OC_Start+0xcc>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2c      	ldr	r2, [pc, #176]	; (8003674 <HAL_TIM_OC_Start+0x178>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d101      	bne.n	80035cc <HAL_TIM_OC_Start+0xd0>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <HAL_TIM_OC_Start+0xd2>
 80035cc:	2300      	movs	r3, #0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a22      	ldr	r2, [pc, #136]	; (8003670 <HAL_TIM_OC_Start+0x174>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d022      	beq.n	8003632 <HAL_TIM_OC_Start+0x136>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f4:	d01d      	beq.n	8003632 <HAL_TIM_OC_Start+0x136>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <HAL_TIM_OC_Start+0x17c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d018      	beq.n	8003632 <HAL_TIM_OC_Start+0x136>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1d      	ldr	r2, [pc, #116]	; (800367c <HAL_TIM_OC_Start+0x180>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_TIM_OC_Start+0x136>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <HAL_TIM_OC_Start+0x184>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00e      	beq.n	8003632 <HAL_TIM_OC_Start+0x136>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a16      	ldr	r2, [pc, #88]	; (8003674 <HAL_TIM_OC_Start+0x178>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d009      	beq.n	8003632 <HAL_TIM_OC_Start+0x136>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_TIM_OC_Start+0x188>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_TIM_OC_Start+0x136>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a16      	ldr	r2, [pc, #88]	; (8003688 <HAL_TIM_OC_Start+0x18c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d111      	bne.n	8003656 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b06      	cmp	r3, #6
 8003642:	d010      	beq.n	8003666 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003654:	e007      	b.n	8003666 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40010000 	.word	0x40010000
 8003674:	40010400 	.word	0x40010400
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40014000 	.word	0x40014000
 8003688:	40001800 	.word	0x40001800

0800368c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e041      	b.n	8003722 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fefe 	bl	80014b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 f8f0 	bl	80038b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003746:	2302      	movs	r3, #2
 8003748:	e0ae      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	f200 809f 	bhi.w	8003898 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800375a:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003795 	.word	0x08003795
 8003764:	08003899 	.word	0x08003899
 8003768:	08003899 	.word	0x08003899
 800376c:	08003899 	.word	0x08003899
 8003770:	080037d5 	.word	0x080037d5
 8003774:	08003899 	.word	0x08003899
 8003778:	08003899 	.word	0x08003899
 800377c:	08003899 	.word	0x08003899
 8003780:	08003817 	.word	0x08003817
 8003784:	08003899 	.word	0x08003899
 8003788:	08003899 	.word	0x08003899
 800378c:	08003899 	.word	0x08003899
 8003790:	08003857 	.word	0x08003857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f928 	bl	80039f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0208 	orr.w	r2, r2, #8
 80037ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0204 	bic.w	r2, r2, #4
 80037be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6999      	ldr	r1, [r3, #24]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	619a      	str	r2, [r3, #24]
      break;
 80037d2:	e064      	b.n	800389e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f978 	bl	8003ad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6999      	ldr	r1, [r3, #24]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	021a      	lsls	r2, r3, #8
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	619a      	str	r2, [r3, #24]
      break;
 8003814:	e043      	b.n	800389e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f9cd 	bl	8003bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0208 	orr.w	r2, r2, #8
 8003830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0204 	bic.w	r2, r2, #4
 8003840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69d9      	ldr	r1, [r3, #28]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	61da      	str	r2, [r3, #28]
      break;
 8003854:	e023      	b.n	800389e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fa21 	bl	8003ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69d9      	ldr	r1, [r3, #28]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	021a      	lsls	r2, r3, #8
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	61da      	str	r2, [r3, #28]
      break;
 8003896:	e002      	b.n	800389e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
      break;
 800389c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a40      	ldr	r2, [pc, #256]	; (80039c4 <TIM_Base_SetConfig+0x114>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d013      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ce:	d00f      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3d      	ldr	r2, [pc, #244]	; (80039c8 <TIM_Base_SetConfig+0x118>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a3c      	ldr	r2, [pc, #240]	; (80039cc <TIM_Base_SetConfig+0x11c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d007      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a3b      	ldr	r2, [pc, #236]	; (80039d0 <TIM_Base_SetConfig+0x120>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3a      	ldr	r2, [pc, #232]	; (80039d4 <TIM_Base_SetConfig+0x124>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d108      	bne.n	8003902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2f      	ldr	r2, [pc, #188]	; (80039c4 <TIM_Base_SetConfig+0x114>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d02b      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d027      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2c      	ldr	r2, [pc, #176]	; (80039c8 <TIM_Base_SetConfig+0x118>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d023      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <TIM_Base_SetConfig+0x11c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d01f      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <TIM_Base_SetConfig+0x120>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01b      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a29      	ldr	r2, [pc, #164]	; (80039d4 <TIM_Base_SetConfig+0x124>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d017      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <TIM_Base_SetConfig+0x128>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a27      	ldr	r2, [pc, #156]	; (80039dc <TIM_Base_SetConfig+0x12c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00f      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <TIM_Base_SetConfig+0x130>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00b      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <TIM_Base_SetConfig+0x134>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a24      	ldr	r2, [pc, #144]	; (80039e8 <TIM_Base_SetConfig+0x138>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a23      	ldr	r2, [pc, #140]	; (80039ec <TIM_Base_SetConfig+0x13c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d108      	bne.n	8003974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <TIM_Base_SetConfig+0x114>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0xf8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <TIM_Base_SetConfig+0x124>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d103      	bne.n	80039b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	615a      	str	r2, [r3, #20]
}
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40010400 	.word	0x40010400
 80039d8:	40014000 	.word	0x40014000
 80039dc:	40014400 	.word	0x40014400
 80039e0:	40014800 	.word	0x40014800
 80039e4:	40001800 	.word	0x40001800
 80039e8:	40001c00 	.word	0x40001c00
 80039ec:	40002000 	.word	0x40002000

080039f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 0302 	bic.w	r3, r3, #2
 8003a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a20      	ldr	r2, [pc, #128]	; (8003ac8 <TIM_OC1_SetConfig+0xd8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_OC1_SetConfig+0x64>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <TIM_OC1_SetConfig+0xdc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d10c      	bne.n	8003a6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f023 0308 	bic.w	r3, r3, #8
 8003a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <TIM_OC1_SetConfig+0xd8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_OC1_SetConfig+0x8e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a14      	ldr	r2, [pc, #80]	; (8003acc <TIM_OC1_SetConfig+0xdc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d111      	bne.n	8003aa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	621a      	str	r2, [r3, #32]
}
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40010400 	.word	0x40010400

08003ad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0210 	bic.w	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0320 	bic.w	r3, r3, #32
 8003b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a22      	ldr	r2, [pc, #136]	; (8003bb4 <TIM_OC2_SetConfig+0xe4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_OC2_SetConfig+0x68>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a21      	ldr	r2, [pc, #132]	; (8003bb8 <TIM_OC2_SetConfig+0xe8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d10d      	bne.n	8003b54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <TIM_OC2_SetConfig+0xe4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_OC2_SetConfig+0x94>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <TIM_OC2_SetConfig+0xe8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d113      	bne.n	8003b8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40010400 	.word	0x40010400

08003bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a21      	ldr	r2, [pc, #132]	; (8003c9c <TIM_OC3_SetConfig+0xe0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d003      	beq.n	8003c22 <TIM_OC3_SetConfig+0x66>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <TIM_OC3_SetConfig+0xe4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d10d      	bne.n	8003c3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a16      	ldr	r2, [pc, #88]	; (8003c9c <TIM_OC3_SetConfig+0xe0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_OC3_SetConfig+0x92>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <TIM_OC3_SetConfig+0xe4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d113      	bne.n	8003c76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	621a      	str	r2, [r3, #32]
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	031b      	lsls	r3, r3, #12
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a12      	ldr	r2, [pc, #72]	; (8003d48 <TIM_OC4_SetConfig+0xa4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_OC4_SetConfig+0x68>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <TIM_OC4_SetConfig+0xa8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d109      	bne.n	8003d20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	019b      	lsls	r3, r3, #6
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40010400 	.word	0x40010400

08003d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	2201      	movs	r2, #1
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1a      	ldr	r2, [r3, #32]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	401a      	ands	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	fa01 f303 	lsl.w	r3, r1, r3
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e05a      	b.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d022      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e00:	d01d      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d018      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00e      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d10c      	bne.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40010400 	.word	0x40010400
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40001800 	.word	0x40001800

08003e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e03f      	b.n	8003f26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd fb7c 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	; 0x24
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f929 	bl	8004130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b08a      	sub	sp, #40	; 0x28
 8003f32:	af02      	add	r7, sp, #8
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d17c      	bne.n	8004048 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <HAL_UART_Transmit+0x2c>
 8003f54:	88fb      	ldrh	r3, [r7, #6]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e075      	b.n	800404a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_UART_Transmit+0x3e>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e06e      	b.n	800404a <HAL_UART_Transmit+0x11c>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2221      	movs	r2, #33	; 0x21
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f82:	f7fd fbf1 	bl	8001768 <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	88fa      	ldrh	r2, [r7, #6]
 8003f92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9c:	d108      	bne.n	8003fb0 <HAL_UART_Transmit+0x82>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	e003      	b.n	8003fb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fc0:	e02a      	b.n	8004018 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2180      	movs	r1, #128	; 0x80
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f840 	bl	8004052 <UART_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e036      	b.n	800404a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e007      	b.n	800400a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	3301      	adds	r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1cf      	bne.n	8003fc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2200      	movs	r2, #0
 800402a:	2140      	movs	r1, #64	; 0x40
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f810 	bl	8004052 <UART_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e006      	b.n	800404a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b090      	sub	sp, #64	; 0x40
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	4613      	mov	r3, r2
 8004060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004062:	e050      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406a:	d04c      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800406c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0x30>
 8004072:	f7fd fb79 	bl	8001768 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407e:	429a      	cmp	r2, r3
 8004080:	d241      	bcs.n	8004106 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040a2:	637a      	str	r2, [r7, #52]	; 0x34
 80040a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e5      	bne.n	8004082 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3314      	adds	r3, #20
 80040bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	613b      	str	r3, [r7, #16]
   return(result);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3314      	adds	r3, #20
 80040d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040d6:	623a      	str	r2, [r7, #32]
 80040d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	69f9      	ldr	r1, [r7, #28]
 80040dc:	6a3a      	ldr	r2, [r7, #32]
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e5      	bne.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e00f      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	429a      	cmp	r2, r3
 8004114:	bf0c      	ite	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	2300      	movne	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	429a      	cmp	r2, r3
 8004122:	d09f      	beq.n	8004064 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3740      	adds	r7, #64	; 0x40
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	b09f      	sub	sp, #124	; 0x7c
 8004136:	af00      	add	r7, sp, #0
 8004138:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800413a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004146:	68d9      	ldr	r1, [r3, #12]
 8004148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	ea40 0301 	orr.w	r3, r0, r1
 8004150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	431a      	orrs	r2, r3
 800415c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	431a      	orrs	r2, r3
 8004162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4313      	orrs	r3, r2
 8004168:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800416a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004174:	f021 010c 	bic.w	r1, r1, #12
 8004178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800417e:	430b      	orrs	r3, r1
 8004180:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418e:	6999      	ldr	r1, [r3, #24]
 8004190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	ea40 0301 	orr.w	r3, r0, r1
 8004198:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4bc5      	ldr	r3, [pc, #788]	; (80044b4 <UART_SetConfig+0x384>)
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d004      	beq.n	80041ae <UART_SetConfig+0x7e>
 80041a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4bc3      	ldr	r3, [pc, #780]	; (80044b8 <UART_SetConfig+0x388>)
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d103      	bne.n	80041b6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041ae:	f7ff f991 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 80041b2:	6778      	str	r0, [r7, #116]	; 0x74
 80041b4:	e002      	b.n	80041bc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041b6:	f7ff f979 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 80041ba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c4:	f040 80b6 	bne.w	8004334 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ca:	461c      	mov	r4, r3
 80041cc:	f04f 0500 	mov.w	r5, #0
 80041d0:	4622      	mov	r2, r4
 80041d2:	462b      	mov	r3, r5
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	6439      	str	r1, [r7, #64]	; 0x40
 80041d8:	415b      	adcs	r3, r3
 80041da:	647b      	str	r3, [r7, #68]	; 0x44
 80041dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041e0:	1912      	adds	r2, r2, r4
 80041e2:	eb45 0303 	adc.w	r3, r5, r3
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	00d9      	lsls	r1, r3, #3
 80041f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041f4:	00d0      	lsls	r0, r2, #3
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	1911      	adds	r1, r2, r4
 80041fc:	6639      	str	r1, [r7, #96]	; 0x60
 80041fe:	416b      	adcs	r3, r5
 8004200:	667b      	str	r3, [r7, #100]	; 0x64
 8004202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	461a      	mov	r2, r3
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	1891      	adds	r1, r2, r2
 800420e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004210:	415b      	adcs	r3, r3
 8004212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004218:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800421c:	f7fb ffee 	bl	80001fc <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4ba5      	ldr	r3, [pc, #660]	; (80044bc <UART_SetConfig+0x38c>)
 8004226:	fba3 2302 	umull	r2, r3, r3, r2
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	011e      	lsls	r6, r3, #4
 800422e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004230:	461c      	mov	r4, r3
 8004232:	f04f 0500 	mov.w	r5, #0
 8004236:	4622      	mov	r2, r4
 8004238:	462b      	mov	r3, r5
 800423a:	1891      	adds	r1, r2, r2
 800423c:	6339      	str	r1, [r7, #48]	; 0x30
 800423e:	415b      	adcs	r3, r3
 8004240:	637b      	str	r3, [r7, #52]	; 0x34
 8004242:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004246:	1912      	adds	r2, r2, r4
 8004248:	eb45 0303 	adc.w	r3, r5, r3
 800424c:	f04f 0000 	mov.w	r0, #0
 8004250:	f04f 0100 	mov.w	r1, #0
 8004254:	00d9      	lsls	r1, r3, #3
 8004256:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800425a:	00d0      	lsls	r0, r2, #3
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	1911      	adds	r1, r2, r4
 8004262:	65b9      	str	r1, [r7, #88]	; 0x58
 8004264:	416b      	adcs	r3, r5
 8004266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	461a      	mov	r2, r3
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	1891      	adds	r1, r2, r2
 8004274:	62b9      	str	r1, [r7, #40]	; 0x28
 8004276:	415b      	adcs	r3, r3
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800427e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004282:	f7fb ffbb 	bl	80001fc <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4b8c      	ldr	r3, [pc, #560]	; (80044bc <UART_SetConfig+0x38c>)
 800428c:	fba3 1302 	umull	r1, r3, r3, r2
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	2164      	movs	r1, #100	; 0x64
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	3332      	adds	r3, #50	; 0x32
 800429e:	4a87      	ldr	r2, [pc, #540]	; (80044bc <UART_SetConfig+0x38c>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ac:	441e      	add	r6, r3
 80042ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b0:	4618      	mov	r0, r3
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	1894      	adds	r4, r2, r2
 80042bc:	623c      	str	r4, [r7, #32]
 80042be:	415b      	adcs	r3, r3
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042c6:	1812      	adds	r2, r2, r0
 80042c8:	eb41 0303 	adc.w	r3, r1, r3
 80042cc:	f04f 0400 	mov.w	r4, #0
 80042d0:	f04f 0500 	mov.w	r5, #0
 80042d4:	00dd      	lsls	r5, r3, #3
 80042d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042da:	00d4      	lsls	r4, r2, #3
 80042dc:	4622      	mov	r2, r4
 80042de:	462b      	mov	r3, r5
 80042e0:	1814      	adds	r4, r2, r0
 80042e2:	653c      	str	r4, [r7, #80]	; 0x50
 80042e4:	414b      	adcs	r3, r1
 80042e6:	657b      	str	r3, [r7, #84]	; 0x54
 80042e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	461a      	mov	r2, r3
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	1891      	adds	r1, r2, r2
 80042f4:	61b9      	str	r1, [r7, #24]
 80042f6:	415b      	adcs	r3, r3
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004302:	f7fb ff7b 	bl	80001fc <__aeabi_uldivmod>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4b6c      	ldr	r3, [pc, #432]	; (80044bc <UART_SetConfig+0x38c>)
 800430c:	fba3 1302 	umull	r1, r3, r3, r2
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	2164      	movs	r1, #100	; 0x64
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	3332      	adds	r3, #50	; 0x32
 800431e:	4a67      	ldr	r2, [pc, #412]	; (80044bc <UART_SetConfig+0x38c>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	f003 0207 	and.w	r2, r3, #7
 800432a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4432      	add	r2, r6
 8004330:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004332:	e0b9      	b.n	80044a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004336:	461c      	mov	r4, r3
 8004338:	f04f 0500 	mov.w	r5, #0
 800433c:	4622      	mov	r2, r4
 800433e:	462b      	mov	r3, r5
 8004340:	1891      	adds	r1, r2, r2
 8004342:	6139      	str	r1, [r7, #16]
 8004344:	415b      	adcs	r3, r3
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800434c:	1912      	adds	r2, r2, r4
 800434e:	eb45 0303 	adc.w	r3, r5, r3
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f04f 0100 	mov.w	r1, #0
 800435a:	00d9      	lsls	r1, r3, #3
 800435c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004360:	00d0      	lsls	r0, r2, #3
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	eb12 0804 	adds.w	r8, r2, r4
 800436a:	eb43 0905 	adc.w	r9, r3, r5
 800436e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4618      	mov	r0, r3
 8004374:	f04f 0100 	mov.w	r1, #0
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	008b      	lsls	r3, r1, #2
 8004382:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004386:	0082      	lsls	r2, r0, #2
 8004388:	4640      	mov	r0, r8
 800438a:	4649      	mov	r1, r9
 800438c:	f7fb ff36 	bl	80001fc <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4b49      	ldr	r3, [pc, #292]	; (80044bc <UART_SetConfig+0x38c>)
 8004396:	fba3 2302 	umull	r2, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	011e      	lsls	r6, r3, #4
 800439e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a0:	4618      	mov	r0, r3
 80043a2:	f04f 0100 	mov.w	r1, #0
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	1894      	adds	r4, r2, r2
 80043ac:	60bc      	str	r4, [r7, #8]
 80043ae:	415b      	adcs	r3, r3
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043b6:	1812      	adds	r2, r2, r0
 80043b8:	eb41 0303 	adc.w	r3, r1, r3
 80043bc:	f04f 0400 	mov.w	r4, #0
 80043c0:	f04f 0500 	mov.w	r5, #0
 80043c4:	00dd      	lsls	r5, r3, #3
 80043c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043ca:	00d4      	lsls	r4, r2, #3
 80043cc:	4622      	mov	r2, r4
 80043ce:	462b      	mov	r3, r5
 80043d0:	1814      	adds	r4, r2, r0
 80043d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80043d4:	414b      	adcs	r3, r1
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4618      	mov	r0, r3
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	008b      	lsls	r3, r1, #2
 80043ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043f0:	0082      	lsls	r2, r0, #2
 80043f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80043f6:	f7fb ff01 	bl	80001fc <__aeabi_uldivmod>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <UART_SetConfig+0x38c>)
 8004400:	fba3 1302 	umull	r1, r3, r3, r2
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	2164      	movs	r1, #100	; 0x64
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	3332      	adds	r3, #50	; 0x32
 8004412:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <UART_SetConfig+0x38c>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441e:	441e      	add	r6, r3
 8004420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004422:	4618      	mov	r0, r3
 8004424:	f04f 0100 	mov.w	r1, #0
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	1894      	adds	r4, r2, r2
 800442e:	603c      	str	r4, [r7, #0]
 8004430:	415b      	adcs	r3, r3
 8004432:	607b      	str	r3, [r7, #4]
 8004434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004438:	1812      	adds	r2, r2, r0
 800443a:	eb41 0303 	adc.w	r3, r1, r3
 800443e:	f04f 0400 	mov.w	r4, #0
 8004442:	f04f 0500 	mov.w	r5, #0
 8004446:	00dd      	lsls	r5, r3, #3
 8004448:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800444c:	00d4      	lsls	r4, r2, #3
 800444e:	4622      	mov	r2, r4
 8004450:	462b      	mov	r3, r5
 8004452:	eb12 0a00 	adds.w	sl, r2, r0
 8004456:	eb43 0b01 	adc.w	fp, r3, r1
 800445a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	4618      	mov	r0, r3
 8004460:	f04f 0100 	mov.w	r1, #0
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	008b      	lsls	r3, r1, #2
 800446e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004472:	0082      	lsls	r2, r0, #2
 8004474:	4650      	mov	r0, sl
 8004476:	4659      	mov	r1, fp
 8004478:	f7fb fec0 	bl	80001fc <__aeabi_uldivmod>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <UART_SetConfig+0x38c>)
 8004482:	fba3 1302 	umull	r1, r3, r3, r2
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	2164      	movs	r1, #100	; 0x64
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	3332      	adds	r3, #50	; 0x32
 8004494:	4a09      	ldr	r2, [pc, #36]	; (80044bc <UART_SetConfig+0x38c>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	f003 020f 	and.w	r2, r3, #15
 80044a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4432      	add	r2, r6
 80044a6:	609a      	str	r2, [r3, #8]
}
 80044a8:	bf00      	nop
 80044aa:	377c      	adds	r7, #124	; 0x7c
 80044ac:	46bd      	mov	sp, r7
 80044ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b2:	bf00      	nop
 80044b4:	40011000 	.word	0x40011000
 80044b8:	40011400 	.word	0x40011400
 80044bc:	51eb851f 	.word	0x51eb851f

080044c0 <__libc_init_array>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4d0d      	ldr	r5, [pc, #52]	; (80044f8 <__libc_init_array+0x38>)
 80044c4:	4c0d      	ldr	r4, [pc, #52]	; (80044fc <__libc_init_array+0x3c>)
 80044c6:	1b64      	subs	r4, r4, r5
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	2600      	movs	r6, #0
 80044cc:	42a6      	cmp	r6, r4
 80044ce:	d109      	bne.n	80044e4 <__libc_init_array+0x24>
 80044d0:	4d0b      	ldr	r5, [pc, #44]	; (8004500 <__libc_init_array+0x40>)
 80044d2:	4c0c      	ldr	r4, [pc, #48]	; (8004504 <__libc_init_array+0x44>)
 80044d4:	f000 f820 	bl	8004518 <_init>
 80044d8:	1b64      	subs	r4, r4, r5
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	2600      	movs	r6, #0
 80044de:	42a6      	cmp	r6, r4
 80044e0:	d105      	bne.n	80044ee <__libc_init_array+0x2e>
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e8:	4798      	blx	r3
 80044ea:	3601      	adds	r6, #1
 80044ec:	e7ee      	b.n	80044cc <__libc_init_array+0xc>
 80044ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f2:	4798      	blx	r3
 80044f4:	3601      	adds	r6, #1
 80044f6:	e7f2      	b.n	80044de <__libc_init_array+0x1e>
 80044f8:	08005398 	.word	0x08005398
 80044fc:	08005398 	.word	0x08005398
 8004500:	08005398 	.word	0x08005398
 8004504:	0800539c 	.word	0x0800539c

08004508 <memset>:
 8004508:	4402      	add	r2, r0
 800450a:	4603      	mov	r3, r0
 800450c:	4293      	cmp	r3, r2
 800450e:	d100      	bne.n	8004512 <memset+0xa>
 8004510:	4770      	bx	lr
 8004512:	f803 1b01 	strb.w	r1, [r3], #1
 8004516:	e7f9      	b.n	800450c <memset+0x4>

08004518 <_init>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr

08004524 <_fini>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr
